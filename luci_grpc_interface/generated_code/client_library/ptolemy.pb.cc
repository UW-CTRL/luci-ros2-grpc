// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ptolemy.proto

#include "ptolemy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sensors {
constexpr AudioPlaybackRequest::AudioPlaybackRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requested_playback_(0)
{}
struct AudioPlaybackRequestDefaultTypeInternal {
  constexpr AudioPlaybackRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AudioPlaybackRequestDefaultTypeInternal() {}
  union {
    AudioPlaybackRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AudioPlaybackRequestDefaultTypeInternal _AudioPlaybackRequest_default_instance_;
constexpr PressRequest::PressRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ramp_assist_(false){}
struct PressRequestDefaultTypeInternal {
  constexpr PressRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PressRequestDefaultTypeInternal() {}
  union {
    PressRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PressRequestDefaultTypeInternal _PressRequest_default_instance_;
constexpr ZoneBoundary::ZoneBoundary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : polygon_()
  , critical_point_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ZoneBoundaryDefaultTypeInternal {
  constexpr ZoneBoundaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneBoundaryDefaultTypeInternal() {}
  union {
    ZoneBoundary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneBoundaryDefaultTypeInternal _ZoneBoundary_default_instance_;
constexpr ZoneBoundaries::ZoneBoundaries(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : zone_boundary_(){}
struct ZoneBoundariesDefaultTypeInternal {
  constexpr ZoneBoundariesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ZoneBoundariesDefaultTypeInternal() {}
  union {
    ZoneBoundaries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ZoneBoundariesDefaultTypeInternal _ZoneBoundaries_default_instance_;
constexpr BlockedZone::BlockedZone(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , sensor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BlockedZoneDefaultTypeInternal {
  constexpr BlockedZoneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockedZoneDefaultTypeInternal() {}
  union {
    BlockedZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockedZoneDefaultTypeInternal _BlockedZone_default_instance_;
constexpr BlockedZones::BlockedZones(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : blocked_zones_(){}
struct BlockedZonesDefaultTypeInternal {
  constexpr BlockedZonesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlockedZonesDefaultTypeInternal() {}
  union {
    BlockedZones _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlockedZonesDefaultTypeInternal _BlockedZones_default_instance_;
constexpr JoystickRange::JoystickRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : begin_(0)
  , end_(0){}
struct JoystickRangeDefaultTypeInternal {
  constexpr JoystickRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickRangeDefaultTypeInternal() {}
  union {
    JoystickRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickRangeDefaultTypeInternal _JoystickRange_default_instance_;
constexpr JoystickRanges::JoystickRanges(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joystick_ranges_(){}
struct JoystickRangesDefaultTypeInternal {
  constexpr JoystickRangesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickRangesDefaultTypeInternal() {}
  union {
    JoystickRanges _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickRangesDefaultTypeInternal _JoystickRanges_default_instance_;
constexpr StartModeData::StartModeData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : missing_devices_()
  , mode_(0)
{}
struct StartModeDataDefaultTypeInternal {
  constexpr StartModeDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StartModeDataDefaultTypeInternal() {}
  union {
    StartModeData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StartModeDataDefaultTypeInternal _StartModeData_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : reply_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , return_code_(0){}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr DFParameters::DFParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : df_timestamp_(0u)
  , target_pressure_(0)
  , high_pressure_(0)
  , low_pressure_(0)
  , in_seat_pressure_(0)
  , off_load_pressure_(0)
  , usb_update_period_(0)
  , cap_update_period_(0){}
struct DFParametersDefaultTypeInternal {
  constexpr DFParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DFParametersDefaultTypeInternal() {}
  union {
    DFParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DFParametersDefaultTypeInternal _DFParameters_default_instance_;
constexpr DFSeatEvent::DFSeatEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : current_timestamp_(0u)
  , event_timestamp_(0u)
  , group_(0)

  , event_type_(0)
{}
struct DFSeatEventDefaultTypeInternal {
  constexpr DFSeatEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DFSeatEventDefaultTypeInternal() {}
  union {
    DFSeatEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DFSeatEventDefaultTypeInternal _DFSeatEvent_default_instance_;
constexpr DistanceData::DistanceData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0){}
struct DistanceDataDefaultTypeInternal {
  constexpr DistanceDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceDataDefaultTypeInternal() {}
  union {
    DistanceData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceDataDefaultTypeInternal _DistanceData_default_instance_;
constexpr SeatPressure::SeatPressure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pressure_(0){}
struct SeatPressureDefaultTypeInternal {
  constexpr SeatPressureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SeatPressureDefaultTypeInternal() {}
  union {
    SeatPressure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SeatPressureDefaultTypeInternal _SeatPressure_default_instance_;
constexpr ObstacleValue_Linear::ObstacleValue_Linear(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0){}
struct ObstacleValue_LinearDefaultTypeInternal {
  constexpr ObstacleValue_LinearDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValue_LinearDefaultTypeInternal() {}
  union {
    ObstacleValue_Linear _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValue_LinearDefaultTypeInternal _ObstacleValue_Linear_default_instance_;
constexpr ObstacleValue_Angular::ObstacleValue_Angular(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : angle_(0){}
struct ObstacleValue_AngularDefaultTypeInternal {
  constexpr ObstacleValue_AngularDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValue_AngularDefaultTypeInternal() {}
  union {
    ObstacleValue_Angular _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValue_AngularDefaultTypeInternal _ObstacleValue_Angular_default_instance_;
constexpr ObstacleValue_Combo::ObstacleValue_Combo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distance_(0)
  , angle_(0){}
struct ObstacleValue_ComboDefaultTypeInternal {
  constexpr ObstacleValue_ComboDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValue_ComboDefaultTypeInternal() {}
  union {
    ObstacleValue_Combo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValue_ComboDefaultTypeInternal _ObstacleValue_Combo_default_instance_;
constexpr ObstacleValue::ObstacleValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ObstacleValueDefaultTypeInternal {
  constexpr ObstacleValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObstacleValueDefaultTypeInternal() {}
  union {
    ObstacleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObstacleValueDefaultTypeInternal _ObstacleValue_default_instance_;
constexpr ClosestObstacles::ClosestObstacles(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : front_(nullptr)
  , front_left_(nullptr)
  , front_right_(nullptr)
  , left_(nullptr)
  , right_(nullptr)
  , back_left_(nullptr)
  , back_right_(nullptr)
  , back_(nullptr)
  , timestamp_(nullptr){}
struct ClosestObstaclesDefaultTypeInternal {
  constexpr ClosestObstaclesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClosestObstaclesDefaultTypeInternal() {}
  union {
    ClosestObstacles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClosestObstaclesDefaultTypeInternal _ClosestObstacles_default_instance_;
constexpr CameraPoints::CameraPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , timestamp_(nullptr){}
struct CameraPointsDefaultTypeInternal {
  constexpr CameraPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraPointsDefaultTypeInternal() {}
  union {
    CameraPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraPointsDefaultTypeInternal _CameraPoints_default_instance_;
constexpr Point3D::Point3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Point3DDefaultTypeInternal {
  constexpr Point3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point3DDefaultTypeInternal _Point3D_default_instance_;
constexpr CameraPoints2D::CameraPoints2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , timestamp_(nullptr){}
struct CameraPoints2DDefaultTypeInternal {
  constexpr CameraPoints2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraPoints2DDefaultTypeInternal() {}
  union {
    CameraPoints2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraPoints2DDefaultTypeInternal _CameraPoints2D_default_instance_;
constexpr Point2D::Point2D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Point2DDefaultTypeInternal {
  constexpr Point2DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point2DDefaultTypeInternal() {}
  union {
    Point2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point2DDefaultTypeInternal _Point2D_default_instance_;
constexpr LoggingData::LoggingData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(0)
  , timestamp_(0){}
struct LoggingDataDefaultTypeInternal {
  constexpr LoggingDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoggingDataDefaultTypeInternal() {}
  union {
    LoggingData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoggingDataDefaultTypeInternal _LoggingData_default_instance_;
constexpr Led::Led(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : led_(0)
{}
struct LedDefaultTypeInternal {
  constexpr LedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LedDefaultTypeInternal() {}
  union {
    Led _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LedDefaultTypeInternal _Led_default_instance_;
constexpr HmiState::HmiState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(0)
{}
struct HmiStateDefaultTypeInternal {
  constexpr HmiStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HmiStateDefaultTypeInternal() {}
  union {
    HmiState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HmiStateDefaultTypeInternal _HmiState_default_instance_;
constexpr HmiStreamData::HmiStreamData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_alt_override_(false)
  , button_state_(0)
{}
struct HmiStreamDataDefaultTypeInternal {
  constexpr HmiStreamDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HmiStreamDataDefaultTypeInternal() {}
  union {
    HmiStreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HmiStreamDataDefaultTypeInternal _HmiStreamData_default_instance_;
constexpr PressCountStreamData::PressCountStreamData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : press_count_(0){}
struct PressCountStreamDataDefaultTypeInternal {
  constexpr PressCountStreamDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PressCountStreamDataDefaultTypeInternal() {}
  union {
    PressCountStreamData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PressCountStreamDataDefaultTypeInternal _PressCountStreamData_default_instance_;
constexpr NavigationScaling::NavigationScaling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : front_fb_(0)
  , front_rl_(0)
  , front_right_fb_(0)
  , front_right_rl_(0)
  , front_left_fb_(0)
  , front_left_rl_(0)
  , right_fb_(0)
  , right_rl_(0)
  , left_fb_(0)
  , left_rl_(0)
  , back_right_fb_(0)
  , back_right_rl_(0)
  , back_left_fb_(0)
  , back_left_rl_(0)
  , back_fb_(0)
  , back_rl_(0)
  , max_js_scale_increase_(0u)
  , max_js_scale_decrease_(0u)
  , luci_active_(false){}
struct NavigationScalingDefaultTypeInternal {
  constexpr NavigationScalingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NavigationScalingDefaultTypeInternal() {}
  union {
    NavigationScaling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NavigationScalingDefaultTypeInternal _NavigationScaling_default_instance_;
constexpr UltrasonicCtrl::UltrasonicCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : board_(0)

  , spi_id_(0)
  , address_(0){}
struct UltrasonicCtrlDefaultTypeInternal {
  constexpr UltrasonicCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicCtrlDefaultTypeInternal() {}
  union {
    UltrasonicCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicCtrlDefaultTypeInternal _UltrasonicCtrl_default_instance_;
constexpr UltrasonicDistance::UltrasonicDistance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : arc_points_()
  , timestamp_(nullptr)
  , distance_(0)
  , board_(0)

  , spi_id_(0)
  , address_(0){}
struct UltrasonicDistanceDefaultTypeInternal {
  constexpr UltrasonicDistanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicDistanceDefaultTypeInternal() {}
  union {
    UltrasonicDistance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicDistanceDefaultTypeInternal _UltrasonicDistance_default_instance_;
constexpr UltrasonicDistances::UltrasonicDistances(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : distances_(){}
struct UltrasonicDistancesDefaultTypeInternal {
  constexpr UltrasonicDistancesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicDistancesDefaultTypeInternal() {}
  union {
    UltrasonicDistances _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicDistancesDefaultTypeInternal _UltrasonicDistances_default_instance_;
constexpr UltrasonicCurve::UltrasonicCurve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curve_()
  , _curve_cached_byte_size_(0)
  , board_(0)

  , spi_id_(0)
  , address_(0){}
struct UltrasonicCurveDefaultTypeInternal {
  constexpr UltrasonicCurveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UltrasonicCurveDefaultTypeInternal() {}
  union {
    UltrasonicCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UltrasonicCurveDefaultTypeInternal _UltrasonicCurve_default_instance_;
constexpr RadarFilter::RadarFilter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filter_(0)
{}
struct RadarFilterDefaultTypeInternal {
  constexpr RadarFilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarFilterDefaultTypeInternal() {}
  union {
    RadarFilter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarFilterDefaultTypeInternal _RadarFilter_default_instance_;
constexpr RadarCtrl::RadarCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : radar_(0)
{}
struct RadarCtrlDefaultTypeInternal {
  constexpr RadarCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarCtrlDefaultTypeInternal() {}
  union {
    RadarCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarCtrlDefaultTypeInternal _RadarCtrl_default_instance_;
constexpr RadarPoint::RadarPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , doppler_(0)
  , cross_section_(0){}
struct RadarPointDefaultTypeInternal {
  constexpr RadarPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarPointDefaultTypeInternal() {}
  union {
    RadarPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarPointDefaultTypeInternal _RadarPoint_default_instance_;
constexpr RadarPoints::RadarPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : points_()
  , timestamp_(nullptr)
  , source_(0)
{}
struct RadarPointsDefaultTypeInternal {
  constexpr RadarPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RadarPointsDefaultTypeInternal() {}
  union {
    RadarPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RadarPointsDefaultTypeInternal _RadarPoints_default_instance_;
constexpr ChairSpeed::ChairSpeed(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , speed_m_p_s_(0){}
struct ChairSpeedDefaultTypeInternal {
  constexpr ChairSpeedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChairSpeedDefaultTypeInternal() {}
  union {
    ChairSpeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChairSpeedDefaultTypeInternal _ChairSpeed_default_instance_;
constexpr ImuCtrl::ImuCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : imu_(0)
{}
struct ImuCtrlDefaultTypeInternal {
  constexpr ImuCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuCtrlDefaultTypeInternal() {}
  union {
    ImuCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuCtrlDefaultTypeInternal _ImuCtrl_default_instance_;
constexpr ImuData::ImuData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , quaternion_x_(0)
  , quaternion_y_(0)
  , quaternion_z_(0)
  , quaternion_w_(0)
  , acceleration_x_(0)
  , acceleration_y_(0)
  , acceleration_z_(0)
  , gyro_x_(0)
  , gyro_y_(0)
  , gyro_z_(0)
  , euler_x_(0)
  , euler_y_(0)
  , euler_z_(0)
  , accelerometer_x_(0)
  , accelerometer_y_(0)
  , accelerometer_z_(0)
  , magnetometer_x_(0)
  , magnetometer_y_(0)
  , magnetometer_z_(0)
  , gravity_x_(0)
  , gravity_y_(0)
  , gravity_z_(0)
  , cal_system_(0)

  , cal_gyroscope_(0)

  , cal_accelerometer_(0)

  , cal_magnetometer_(0)

  , source_(0)
{}
struct ImuDataDefaultTypeInternal {
  constexpr ImuDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImuDataDefaultTypeInternal() {}
  union {
    ImuData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImuDataDefaultTypeInternal _ImuData_default_instance_;
constexpr ChairMode::ChairMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_drive_mode_(false){}
struct ChairModeDefaultTypeInternal {
  constexpr ChairModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChairModeDefaultTypeInternal() {}
  union {
    ChairMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChairModeDefaultTypeInternal _ChairMode_default_instance_;
constexpr ChairProfile::ChairProfile(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : profile_(0){}
struct ChairProfileDefaultTypeInternal {
  constexpr ChairProfileDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChairProfileDefaultTypeInternal() {}
  union {
    ChairProfile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChairProfileDefaultTypeInternal _ChairProfile_default_instance_;
constexpr SpeedSetting::SpeedSetting(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : speed_setting_(0){}
struct SpeedSettingDefaultTypeInternal {
  constexpr SpeedSettingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SpeedSettingDefaultTypeInternal() {}
  union {
    SpeedSetting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SpeedSettingDefaultTypeInternal _SpeedSetting_default_instance_;
constexpr JoystickData::JoystickData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : joystick_zone_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , forward_back_(0)
  , left_right_(0){}
struct JoystickDataDefaultTypeInternal {
  constexpr JoystickDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickDataDefaultTypeInternal() {}
  union {
    JoystickData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickDataDefaultTypeInternal _JoystickData_default_instance_;
constexpr Joystick::Joystick(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_back_(0)
  , left_right_(0){}
struct JoystickDefaultTypeInternal {
  constexpr JoystickDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~JoystickDefaultTypeInternal() {}
  union {
    Joystick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT JoystickDefaultTypeInternal _Joystick_default_instance_;
constexpr BatteryVoltage::BatteryVoltage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battery_voltage_(0){}
struct BatteryVoltageDefaultTypeInternal {
  constexpr BatteryVoltageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryVoltageDefaultTypeInternal() {}
  union {
    BatteryVoltage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryVoltageDefaultTypeInternal _BatteryVoltage_default_instance_;
constexpr BatteryPercent::BatteryPercent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battery_percentage_(0){}
struct BatteryPercentDefaultTypeInternal {
  constexpr BatteryPercentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryPercentDefaultTypeInternal() {}
  union {
    BatteryPercent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryPercentDefaultTypeInternal _BatteryPercent_default_instance_;
constexpr GPSData::GPSData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , heading_of_motion_(0)
  , number_of_sv_(0u)
  , hdop_(0u)
  , height_above_sea_(0)
  , ground_speed_(0)
  , quality_(0)

  , year_(0)
  , month_(0)
  , day_(0)
  , hour_(0)
  , minute_(0)
  , second_(0){}
struct GPSDataDefaultTypeInternal {
  constexpr GPSDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GPSDataDefaultTypeInternal() {}
  union {
    GPSData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GPSDataDefaultTypeInternal _GPSData_default_instance_;
constexpr EncoderData::EncoderData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , left_angle_(0)
  , right_angle_(0)
  , fl_caster_degrees_(0)
  , bl_caster_degrees_(0)
  , fr_caster_degrees_(0)
  , br_caster_degrees_(0){}
struct EncoderDataDefaultTypeInternal {
  constexpr EncoderDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EncoderDataDefaultTypeInternal() {}
  union {
    EncoderData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EncoderDataDefaultTypeInternal _EncoderData_default_instance_;
constexpr Vec3::Vec3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vec3DefaultTypeInternal {
  constexpr Vec3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec3DefaultTypeInternal() {}
  union {
    Vec3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec3DefaultTypeInternal _Vec3_default_instance_;
constexpr Vec4::Vec4(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : w_(0)
  , x_(0)
  , y_(0)
  , z_(0){}
struct Vec4DefaultTypeInternal {
  constexpr Vec4DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vec4DefaultTypeInternal() {}
  union {
    Vec4 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vec4DefaultTypeInternal _Vec4_default_instance_;
constexpr IrFrame::IrFrame(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , camera_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(nullptr)
  , width_(0)
  , height_(0)
  , size_(0){}
struct IrFrameDefaultTypeInternal {
  constexpr IrFrameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IrFrameDefaultTypeInternal() {}
  union {
    IrFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IrFrameDefaultTypeInternal _IrFrame_default_instance_;
constexpr AhrsData::AhrsData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : linear_velocity_(nullptr)
  , linear_acceleration_(nullptr)
  , angular_velocity_(nullptr)
  , angular_acceleration_(nullptr)
  , orientation_(nullptr)
  , timestamp_(nullptr){}
struct AhrsDataDefaultTypeInternal {
  constexpr AhrsDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AhrsDataDefaultTypeInternal() {}
  union {
    AhrsData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AhrsDataDefaultTypeInternal _AhrsData_default_instance_;
constexpr RemoteJsValues::RemoteJsValues(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : forward_back_(0)
  , left_right_(0){}
struct RemoteJsValuesDefaultTypeInternal {
  constexpr RemoteJsValuesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RemoteJsValuesDefaultTypeInternal() {}
  union {
    RemoteJsValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RemoteJsValuesDefaultTypeInternal _RemoteJsValues_default_instance_;
constexpr ModeCtrl::ModeCtrl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mode_(0)
{}
struct ModeCtrlDefaultTypeInternal {
  constexpr ModeCtrlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModeCtrlDefaultTypeInternal() {}
  union {
    ModeCtrl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModeCtrlDefaultTypeInternal _ModeCtrl_default_instance_;
constexpr RampMode::RampMode(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ramp_mode_(false)
  , ramp_approach_(false){}
struct RampModeDefaultTypeInternal {
  constexpr RampModeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RampModeDefaultTypeInternal() {}
  union {
    RampMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RampModeDefaultTypeInternal _RampMode_default_instance_;
constexpr RampAssistStates::RampAssistStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : timestamp_(nullptr)
  , state_(false)
  , approach_(false){}
struct RampAssistStatesDefaultTypeInternal {
  constexpr RampAssistStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RampAssistStatesDefaultTypeInternal() {}
  union {
    RampAssistStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RampAssistStatesDefaultTypeInternal _RampAssistStates_default_instance_;
}  // namespace sensors
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ptolemy_2eproto[57];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ptolemy_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ptolemy_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ptolemy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::AudioPlaybackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::AudioPlaybackRequest, requested_playback_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::PressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::PressRequest, ramp_assist_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, polygon_),
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, critical_point_),
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundary, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundaries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ZoneBoundaries, zone_boundary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZone, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZone, sensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZones, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::BlockedZones, blocked_zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRange, begin_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRange, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRanges, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickRanges, joystick_ranges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::StartModeData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::StartModeData, mode_),
  PROTOBUF_FIELD_OFFSET(::sensors::StartModeData, missing_devices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Response, reply_),
  PROTOBUF_FIELD_OFFSET(::sensors::Response, return_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, df_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, target_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, high_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, low_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, in_seat_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, off_load_pressure_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, usb_update_period_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFParameters, cap_update_period_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, current_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, event_timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, group_),
  PROTOBUF_FIELD_OFFSET(::sensors::DFSeatEvent, event_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::DistanceData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::DistanceData, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::SeatPressure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::SeatPressure, pressure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Linear, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Linear, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Angular, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Angular, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Combo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Combo, distance_),
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue_Combo, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::sensors::ObstacleValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, front_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, front_left_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, front_right_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, left_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, right_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, back_left_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, back_right_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, back_),
  PROTOBUF_FIELD_OFFSET(::sensors::ClosestObstacles, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::Point3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints2D, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::CameraPoints2D, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Point2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, key_),
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, value_),
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::LoggingData, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Led, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Led, led_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::HmiStreamData, is_alt_override_),
  PROTOBUF_FIELD_OFFSET(::sensors::HmiStreamData, button_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::PressCountStreamData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::PressCountStreamData, press_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_right_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_right_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_left_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, front_left_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, right_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, right_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, left_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, left_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_right_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_right_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_left_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_left_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_fb_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, back_rl_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, max_js_scale_increase_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, max_js_scale_decrease_),
  PROTOBUF_FIELD_OFFSET(::sensors::NavigationScaling, luci_active_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, board_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, spi_id_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCtrl, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, distance_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, board_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, spi_id_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, address_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistance, arc_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistances, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicDistances, distances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, curve_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, board_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, spi_id_),
  PROTOBUF_FIELD_OFFSET(::sensors::UltrasonicCurve, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarFilter, filter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarCtrl, radar_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, z_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, doppler_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoint, cross_section_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, points_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, source_),
  PROTOBUF_FIELD_OFFSET(::sensors::RadarPoints, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairSpeed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairSpeed, speed_m_p_s_),
  PROTOBUF_FIELD_OFFSET(::sensors::ChairSpeed, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuCtrl, imu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, quaternion_w_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, acceleration_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, acceleration_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, acceleration_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gyro_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gyro_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gyro_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, euler_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, euler_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, euler_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, accelerometer_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, accelerometer_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, accelerometer_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, magnetometer_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, magnetometer_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, magnetometer_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gravity_x_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gravity_y_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, gravity_z_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_system_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_gyroscope_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_accelerometer_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, cal_magnetometer_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, timestamp_),
  PROTOBUF_FIELD_OFFSET(::sensors::ImuData, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairMode, is_drive_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ChairProfile, profile_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::SpeedSetting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::SpeedSetting, speed_setting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, forward_back_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, left_right_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, joystick_zone_),
  PROTOBUF_FIELD_OFFSET(::sensors::JoystickData, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Joystick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Joystick, forward_back_),
  PROTOBUF_FIELD_OFFSET(::sensors::Joystick, left_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryVoltage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryVoltage, battery_voltage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryPercent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::BatteryPercent, battery_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, latitude_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, longitude_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, heading_of_motion_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, number_of_sv_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, hdop_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, height_above_sea_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, ground_speed_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, quality_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, year_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, month_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, day_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, hour_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, minute_),
  PROTOBUF_FIELD_OFFSET(::sensors::GPSData, second_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, left_angle_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, right_angle_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, fl_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, bl_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, fr_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, br_caster_degrees_),
  PROTOBUF_FIELD_OFFSET(::sensors::EncoderData, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, w_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, x_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, y_),
  PROTOBUF_FIELD_OFFSET(::sensors::Vec4, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, frame_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, width_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, height_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, camera_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, size_),
  PROTOBUF_FIELD_OFFSET(::sensors::IrFrame, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, linear_acceleration_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, angular_acceleration_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, orientation_),
  PROTOBUF_FIELD_OFFSET(::sensors::AhrsData, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RemoteJsValues, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RemoteJsValues, forward_back_),
  PROTOBUF_FIELD_OFFSET(::sensors::RemoteJsValues, left_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::ModeCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::ModeCtrl, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RampMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RampMode, ramp_mode_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampMode, ramp_approach_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, state_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, approach_),
  PROTOBUF_FIELD_OFFSET(::sensors::RampAssistStates, timestamp_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::sensors::AudioPlaybackRequest)},
  { 7, -1, -1, sizeof(::sensors::PressRequest)},
  { 14, -1, -1, sizeof(::sensors::ZoneBoundary)},
  { 23, -1, -1, sizeof(::sensors::ZoneBoundaries)},
  { 30, -1, -1, sizeof(::sensors::BlockedZone)},
  { 38, -1, -1, sizeof(::sensors::BlockedZones)},
  { 45, -1, -1, sizeof(::sensors::JoystickRange)},
  { 53, -1, -1, sizeof(::sensors::JoystickRanges)},
  { 60, -1, -1, sizeof(::sensors::StartModeData)},
  { 68, -1, -1, sizeof(::sensors::Response)},
  { 76, -1, -1, sizeof(::sensors::DFParameters)},
  { 90, -1, -1, sizeof(::sensors::DFSeatEvent)},
  { 100, -1, -1, sizeof(::sensors::DistanceData)},
  { 107, -1, -1, sizeof(::sensors::SeatPressure)},
  { 114, -1, -1, sizeof(::sensors::ObstacleValue_Linear)},
  { 121, -1, -1, sizeof(::sensors::ObstacleValue_Angular)},
  { 128, -1, -1, sizeof(::sensors::ObstacleValue_Combo)},
  { 136, -1, -1, sizeof(::sensors::ObstacleValue)},
  { 146, -1, -1, sizeof(::sensors::ClosestObstacles)},
  { 161, -1, -1, sizeof(::sensors::CameraPoints)},
  { 169, -1, -1, sizeof(::sensors::Point3D)},
  { 178, -1, -1, sizeof(::sensors::CameraPoints2D)},
  { 186, -1, -1, sizeof(::sensors::Point2D)},
  { 194, -1, -1, sizeof(::sensors::LoggingData)},
  { 204, -1, -1, sizeof(::sensors::Led)},
  { 211, -1, -1, sizeof(::sensors::HmiState)},
  { 218, -1, -1, sizeof(::sensors::HmiStreamData)},
  { 226, -1, -1, sizeof(::sensors::PressCountStreamData)},
  { 233, -1, -1, sizeof(::sensors::NavigationScaling)},
  { 258, -1, -1, sizeof(::sensors::UltrasonicCtrl)},
  { 267, -1, -1, sizeof(::sensors::UltrasonicDistance)},
  { 279, -1, -1, sizeof(::sensors::UltrasonicDistances)},
  { 286, -1, -1, sizeof(::sensors::UltrasonicCurve)},
  { 296, -1, -1, sizeof(::sensors::RadarFilter)},
  { 303, -1, -1, sizeof(::sensors::RadarCtrl)},
  { 310, -1, -1, sizeof(::sensors::RadarPoint)},
  { 321, -1, -1, sizeof(::sensors::RadarPoints)},
  { 330, -1, -1, sizeof(::sensors::ChairSpeed)},
  { 338, -1, -1, sizeof(::sensors::ImuCtrl)},
  { 345, -1, -1, sizeof(::sensors::ImuData)},
  { 379, -1, -1, sizeof(::sensors::ChairMode)},
  { 386, -1, -1, sizeof(::sensors::ChairProfile)},
  { 393, -1, -1, sizeof(::sensors::SpeedSetting)},
  { 400, -1, -1, sizeof(::sensors::JoystickData)},
  { 410, -1, -1, sizeof(::sensors::Joystick)},
  { 418, -1, -1, sizeof(::sensors::BatteryVoltage)},
  { 425, -1, -1, sizeof(::sensors::BatteryPercent)},
  { 432, -1, -1, sizeof(::sensors::GPSData)},
  { 452, -1, -1, sizeof(::sensors::EncoderData)},
  { 465, -1, -1, sizeof(::sensors::Vec3)},
  { 474, -1, -1, sizeof(::sensors::Vec4)},
  { 484, -1, -1, sizeof(::sensors::IrFrame)},
  { 496, -1, -1, sizeof(::sensors::AhrsData)},
  { 508, -1, -1, sizeof(::sensors::RemoteJsValues)},
  { 516, -1, -1, sizeof(::sensors::ModeCtrl)},
  { 523, -1, -1, sizeof(::sensors::RampMode)},
  { 531, -1, -1, sizeof(::sensors::RampAssistStates)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_AudioPlaybackRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_PressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ZoneBoundary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ZoneBoundaries_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BlockedZone_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BlockedZones_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_JoystickRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_JoystickRanges_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_StartModeData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_DFParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_DFSeatEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_DistanceData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_SeatPressure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_Linear_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_Angular_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_Combo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ObstacleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ClosestObstacles_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_CameraPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Point3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_CameraPoints2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_LoggingData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Led_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_HmiState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_HmiStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_PressCountStreamData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_NavigationScaling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicDistance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicDistances_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_UltrasonicCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RadarPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ChairSpeed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ImuCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ImuData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ChairMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ChairProfile_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_SpeedSetting_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_JoystickData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Joystick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BatteryVoltage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_BatteryPercent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_GPSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_EncoderData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Vec3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_Vec4_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_IrFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_AhrsData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RemoteJsValues_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_ModeCtrl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RampMode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sensors::_RampAssistStates_default_instance_),
};

const char descriptor_table_protodef_ptolemy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rptolemy.proto\022\007sensors\032\037google/protobu"
  "f/timestamp.proto\032\033google/protobuf/empty"
  ".proto\"\213\001\n\024AudioPlaybackRequest\022K\n\022reque"
  "sted_playback\030\001 \001(\0162/.sensors.AudioPlayb"
  "ackRequest.RequestedPlayback\"&\n\021Requeste"
  "dPlayback\022\021\n\rERROR_DISABLE\020\000\"#\n\014PressReq"
  "uest\022\023\n\013ramp_assist\030\001 \001(\010\"i\n\014ZoneBoundar"
  "y\022!\n\007polygon\030\001 \003(\0132\020.sensors.Point2D\022(\n\016"
  "critical_point\030\002 \003(\0132\020.sensors.Point2D\022\014"
  "\n\004name\030\003 \001(\t\">\n\016ZoneBoundaries\022,\n\rzone_b"
  "oundary\030\001 \003(\0132\025.sensors.ZoneBoundary\"\?\n\013"
  "BlockedZone\022 \n\006points\030\001 \003(\0132\020.sensors.Po"
  "int2D\022\016\n\006sensor\030\002 \001(\t\";\n\014BlockedZones\022+\n"
  "\rblocked_zones\030\001 \003(\0132\024.sensors.BlockedZo"
  "ne\"+\n\rJoystickRange\022\r\n\005begin\030\001 \001(\002\022\013\n\003en"
  "d\030\002 \001(\002\"A\n\016JoystickRanges\022/\n\017joystick_ra"
  "nges\030\001 \003(\0132\026.sensors.JoystickRange\"\230\001\n\rS"
  "tartModeData\022/\n\004mode\030\001 \001(\0162!.sensors.Sta"
  "rtModeData.StartModes\022\027\n\017missing_devices"
  "\030\002 \003(\t\"=\n\nStartModes\022\013\n\007UNKNOWN\020\000\022\n\n\006NOR"
  "MAL\020\001\022\010\n\004AUTO\020\002\022\014\n\010DISABLED\020\003\".\n\010Respons"
  "e\022\r\n\005reply\030\001 \001(\t\022\023\n\013return_code\030\002 \001(\005\"\325\001"
  "\n\014DFParameters\022\024\n\014df_timestamp\030\001 \001(\r\022\027\n\017"
  "target_pressure\030\002 \001(\002\022\025\n\rhigh_pressure\030\003"
  " \001(\002\022\024\n\014low_pressure\030\004 \001(\002\022\030\n\020in_seat_pr"
  "essure\030\005 \001(\002\022\031\n\021off_load_pressure\030\006 \001(\002\022"
  "\031\n\021usb_update_period\030\007 \001(\005\022\031\n\021cap_update"
  "_period\030\010 \001(\005\"\211\003\n\013DFSeatEvent\022\031\n\021current"
  "_timestamp\030\001 \001(\r\022\027\n\017event_timestamp\030\002 \001("
  "\r\022.\n\005group\030\003 \001(\0162\037.sensors.DFSeatEvent.E"
  "ventGroup\0222\n\nevent_type\030\004 \001(\0162\036.sensors."
  "DFSeatEvent.EventType\"Y\n\nEventGroup\022\027\n\023U"
  "NKNOWN_EVENT_GROUP\020\000\022\r\n\010PRESSURE\020\241\001\022\014\n\007W"
  "ETNESS\020\242\001\022\016\n\tINFLATION\020\243\001\"\005\010\001\020\240\001\"\206\001\n\tEve"
  "ntType\022\037\n\033UNKNOWN_PRESSURE_EVENT_TYPE\020\000\022"
  "\017\n\013OUT_OF_SEAT\020\022\022\021\n\rPRESSURE_HIGH\020\023\022\020\n\014P"
  "RESSURE_LOW\020\024\022\013\n\007OFFLOAD\020\025\022\017\n\013PRESSURE_O"
  "K\020\026\"\004\010\001\020\021\" \n\014DistanceData\022\020\n\010distance\030\001 "
  "\001(\005\" \n\014SeatPressure\022\020\n\010pressure\030\001 \001(\002\"\213\002"
  "\n\rObstacleValue\022/\n\006linear\030\001 \001(\0132\035.sensor"
  "s.ObstacleValue.LinearH\000\0221\n\007angular\030\002 \001("
  "\0132\036.sensors.ObstacleValue.AngularH\000\022-\n\005c"
  "ombo\030\003 \001(\0132\034.sensors.ObstacleValue.Combo"
  "H\000\032\032\n\006Linear\022\020\n\010distance\030\001 \001(\002\032\030\n\007Angula"
  "r\022\r\n\005angle\030\001 \001(\002\032(\n\005Combo\022\020\n\010distance\030\001 "
  "\001(\002\022\r\n\005angle\030\002 \001(\002B\007\n\005value\"\213\003\n\020ClosestO"
  "bstacles\022%\n\005front\030\001 \001(\0132\026.sensors.Obstac"
  "leValue\022*\n\nfront_left\030\002 \001(\0132\026.sensors.Ob"
  "stacleValue\022+\n\013front_right\030\003 \001(\0132\026.senso"
  "rs.ObstacleValue\022$\n\004left\030\004 \001(\0132\026.sensors"
  ".ObstacleValue\022%\n\005right\030\005 \001(\0132\026.sensors."
  "ObstacleValue\022)\n\tback_left\030\006 \001(\0132\026.senso"
  "rs.ObstacleValue\022*\n\nback_right\030\007 \001(\0132\026.s"
  "ensors.ObstacleValue\022$\n\004back\030\010 \001(\0132\026.sen"
  "sors.ObstacleValue\022-\n\ttimestamp\030\t \001(\0132\032."
  "google.protobuf.Timestamp\"_\n\014CameraPoint"
  "s\022 \n\006points\030\001 \003(\0132\020.sensors.Point3D\022-\n\tt"
  "imestamp\030\002 \001(\0132\032.google.protobuf.Timesta"
  "mp\"*\n\007Point3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z"
  "\030\003 \001(\002\"a\n\016CameraPoints2D\022 \n\006points\030\001 \003(\013"
  "2\020.sensors.Point2D\022-\n\ttimestamp\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\"\037\n\007Point2D\022\t\n\001"
  "x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"^\n\013LoggingData\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\001\022\021\n\ttimestamp\030\003 \001(\005"
  "\022 \n\006points\030\004 \003(\0132\020.sensors.Point3D\"\304\001\n\003L"
  "ed\022\036\n\003led\030\001 \001(\0162\021.sensors.Led.Leds\"\234\001\n\004L"
  "eds\022\013\n\007UNKNOWN\020\000\022\021\n\rSYSTEM_STATUS\020\001\022\r\n\tS"
  "ENSOR_OK\020\002\022\022\n\016SENSOR_BLOCKED\020\003\022\020\n\014SENSOR"
  "_ERROR\020\004\022\022\n\016WIFI_CONNECTED\020\005\022\022\n\016CELL_CON"
  "NECTED\020\006\022\027\n\023BLUETOOTH_CONNECTED\020\007\"\270\005\n\010Hm"
  "iState\022\'\n\005state\030\001 \001(\0162\030.sensors.HmiState"
  ".States\"\202\005\n\006States\022\023\n\017SETUP_APP_PULSE\020\000\022"
  "\026\n\022REACTION_TEST_WAIT\020\001\022\024\n\020REACTION_TEST"
  "_GO\020\002\022\027\n\023SENSOR_SYSTEM_ERROR\020\003\022\017\n\013NOMINA"
  "L_OFF\020\004\022\032\n\026SENSOR_SYSTEM_OVERRIDE\020\005\022\020\n\014L"
  "UCI_LOADING\020\006\022\022\n\016SENSOR_BLOCKED\020\t\022\r\n\tSYS"
  "TEM_OK\020\n\022\025\n\021STABILITY_WARNING\020\013\022\024\n\020STABI"
  "LITY_DANGER\020\014\022\024\n\020STABILITY_TIPPED\020\r\022\020\n\014S"
  "ENDING_LOGS\020\016\022\020\n\014WIFI_SENDING\020\017\022\022\n\016WIFI_"
  "AVAILABLE\020\020\022\020\n\014CELL_SENDING\020\021\022\022\n\016CELL_AV"
  "AILABLE\020\022\022\020\n\014USER_KEY_LOW\020\023\022\024\n\020USER_KEY_"
  "PRESENT\020\024\022\r\n\tNO_ACTION\020\025\022\022\n\016BUTTON_PRESS"
  "ED\020\026\022\026\n\022UPDATE_IN_PROGRESS\020\027\022\013\n\007ALL_OFF\020"
  "\030\022\016\n\nFLASH_LEDS\020\031\022\016\n\nCHASE_LEDS\020\032\022\021\n\rTES"
  "T_USER_KEY\020\033\022\r\n\tTEST_WIFI\020\034\022\r\n\tTEST_CELL"
  "\020\035\022\022\n\016TEST_SENSOR_OK\020\036\022\027\n\023TEST_SENSOR_WA"
  "RNING\020\037\022\025\n\021TEST_SENSOR_ERROR\020 \022\024\n\020TEST_L"
  "UCI_BUTTON\020!\"\214\001\n\rHmiStreamData\022\027\n\017is_alt"
  "_override\030\001 \001(\010\0228\n\014button_state\030\002 \001(\0162\"."
  "sensors.HmiStreamData.ButtonState\"(\n\013But"
  "tonState\022\013\n\007PRESSED\020\000\022\014\n\010RELEASED\020\001\"+\n\024P"
  "ressCountStreamData\022\023\n\013press_count\030\001 \001(\005"
  "\"\252\003\n\021NavigationScaling\022\020\n\010front_fb\030\001 \001(\002"
  "\022\020\n\010front_rl\030\002 \001(\002\022\026\n\016front_right_fb\030\003 \001"
  "(\002\022\026\n\016front_right_rl\030\004 \001(\002\022\025\n\rfront_left"
  "_fb\030\005 \001(\002\022\025\n\rfront_left_rl\030\006 \001(\002\022\020\n\010righ"
  "t_fb\030\007 \001(\002\022\020\n\010right_rl\030\010 \001(\002\022\017\n\007left_fb\030"
  "\t \001(\002\022\017\n\007left_rl\030\n \001(\002\022\025\n\rback_right_fb\030"
  "\013 \001(\002\022\025\n\rback_right_rl\030\014 \001(\002\022\024\n\014back_lef"
  "t_fb\030\r \001(\002\022\024\n\014back_left_rl\030\016 \001(\002\022\017\n\007back"
  "_fb\030\017 \001(\002\022\017\n\007back_rl\030\020 \001(\002\022\035\n\025max_js_sca"
  "le_increase\030\021 \001(\r\022\035\n\025max_js_scale_decrea"
  "se\030\022 \001(\r\022\023\n\013luci_active\030\023 \001(\010\"\235\001\n\016Ultras"
  "onicCtrl\022,\n\005board\030\001 \001(\0162\035.sensors.Ultras"
  "onicCtrl.Board\022\016\n\006spi_id\030\002 \001(\005\022\017\n\007addres"
  "s\030\003 \001(\005\"<\n\005Board\022\013\n\007UNKNOWN\020\000\022\007\n\003MPU\020\001\022\r"
  "\n\tIO_B_LEFT\020\002\022\016\n\nIO_B_RIGHT\020\003\"\214\002\n\022Ultras"
  "onicDistance\022\020\n\010distance\030\001 \001(\001\0220\n\005board\030"
  "\002 \001(\0162!.sensors.UltrasonicDistance.Board"
  "\022\016\n\006spi_id\030\003 \001(\005\022\017\n\007address\030\004 \001(\005\022-\n\ttim"
  "estamp\030\005 \001(\0132\032.google.protobuf.Timestamp"
  "\022$\n\narc_points\030\006 \003(\0132\020.sensors.Point3D\"<"
  "\n\005Board\022\013\n\007UNKNOWN\020\000\022\007\n\003MPU\020\001\022\r\n\tIO_B_LE"
  "FT\020\002\022\016\n\nIO_B_RIGHT\020\003\"E\n\023UltrasonicDistan"
  "ces\022.\n\tdistances\030\001 \003(\0132\033.sensors.Ultraso"
  "nicDistance\"\256\001\n\017UltrasonicCurve\022\r\n\005curve"
  "\030\001 \003(\005\022-\n\005board\030\002 \001(\0162\036.sensors.Ultrason"
  "icCurve.Board\022\016\n\006spi_id\030\003 \001(\005\022\017\n\007address"
  "\030\004 \001(\005\"<\n\005Board\022\013\n\007UNKNOWN\020\000\022\007\n\003MPU\020\001\022\r\n"
  "\tIO_B_LEFT\020\002\022\016\n\nIO_B_RIGHT\020\003\"\253\001\n\013RadarFi"
  "lter\022+\n\006filter\030\001 \001(\0162\033.sensors.RadarFilt"
  "er.Filter\"o\n\006Filter\022\016\n\nRANGE_CHOP\020\000\022\n\n\006O"
  "RIGIN\020\001\022\007\n\003FOV\020\002\022\010\n\004PEAK\020\003\022\n\n\006STICKY\020\004\022\020"
  "\n\014EXTRA_STICKY\020\005\022\016\n\nTRANSFORMS\020\006\022\010\n\004ADAM"
  "\020\007\"j\n\tRadarCtrl\022\'\n\005radar\030\001 \001(\0162\030.sensors"
  ".RadarCtrl.Radar\"4\n\005Radar\022\013\n\007UNKNOWN\020\000\022\010"
  "\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\t\n\005FRONT\020\003\"U\n\nRadarP"
  "oint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\017\n"
  "\007doppler\030\004 \001(\001\022\025\n\rcross_section\030\005 \001(\001\"\303\001"
  "\n\013RadarPoints\022#\n\006points\030\001 \003(\0132\023.sensors."
  "RadarPoint\022*\n\006source\030\002 \001(\0162\032.sensors.Rad"
  "arPoints.Radar\022-\n\ttimestamp\030\003 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"4\n\005Radar\022\013\n\007UNKNOW"
  "N\020\000\022\010\n\004LEFT\020\001\022\t\n\005RIGHT\020\002\022\t\n\005FRONT\020\003\"P\n\nC"
  "hairSpeed\022\023\n\013speed_m_p_s\030\001 \001(\001\022-\n\ttimest"
  "amp\030\002 \001(\0132\032.google.protobuf.Timestamp\"$\n"
  "\007ImuCtrl\022\031\n\003imu\030\001 \001(\0162\014.sensors.Imu\"\351\006\n\007"
  "ImuData\022\024\n\014quaternion_x\030\001 \001(\001\022\024\n\014quatern"
  "ion_y\030\002 \001(\001\022\024\n\014quaternion_z\030\003 \001(\001\022\024\n\014qua"
  "ternion_w\030\004 \001(\001\022\026\n\016acceleration_x\030\005 \001(\001\022"
  "\026\n\016acceleration_y\030\006 \001(\001\022\026\n\016acceleration_"
  "z\030\007 \001(\001\022\016\n\006gyro_x\030\010 \001(\001\022\016\n\006gyro_y\030\t \001(\001\022"
  "\016\n\006gyro_z\030\n \001(\001\022\017\n\007euler_x\030\013 \001(\001\022\017\n\007eule"
  "r_y\030\014 \001(\001\022\017\n\007euler_z\030\r \001(\001\022\027\n\017accelerome"
  "ter_x\030\016 \001(\001\022\027\n\017accelerometer_y\030\017 \001(\001\022\027\n\017"
  "accelerometer_z\030\020 \001(\001\022\026\n\016magnetometer_x\030"
  "\021 \001(\001\022\026\n\016magnetometer_y\030\022 \001(\001\022\026\n\016magneto"
  "meter_z\030\023 \001(\001\022\021\n\tgravity_x\030\024 \001(\001\022\021\n\tgrav"
  "ity_y\030\025 \001(\001\022\021\n\tgravity_z\030\026 \001(\001\0226\n\ncal_sy"
  "stem\030\027 \001(\0162\".sensors.ImuData.Calibration"
  "Status\0229\n\rcal_gyroscope\030\030 \001(\0162\".sensors."
  "ImuData.CalibrationStatus\022=\n\021cal_acceler"
  "ometer\030\031 \001(\0162\".sensors.ImuData.Calibrati"
  "onStatus\022<\n\020cal_magnetometer\030\032 \001(\0162\".sen"
  "sors.ImuData.CalibrationStatus\022-\n\ttimest"
  "amp\030\033 \001(\0132\032.google.protobuf.Timestamp\022\034\n"
  "\006source\030\034 \001(\0162\014.sensors.Imu\"R\n\021Calibrati"
  "onStatus\022\022\n\016NOT_CALIBRATED\020\000\022\017\n\013IN_PROGR"
  "ESS\020\001\022\n\n\006USABLE\020\002\022\014\n\010COMPLETE\020\003\"\"\n\tChair"
  "Mode\022\025\n\ris_drive_mode\030\001 \001(\010\"\037\n\014ChairProf"
  "ile\022\017\n\007profile\030\001 \001(\005\"%\n\014SpeedSetting\022\025\n\r"
  "speed_setting\030\001 \001(\005\"~\n\014JoystickData\022\024\n\014f"
  "orward_back\030\001 \001(\005\022\022\n\nleft_right\030\002 \001(\005\022\025\n"
  "\rjoystick_zone\030\003 \001(\t\022-\n\ttimestamp\030\004 \001(\0132"
  "\032.google.protobuf.Timestamp\"4\n\010Joystick\022"
  "\024\n\014forward_back\030\001 \001(\005\022\022\n\nleft_right\030\002 \001("
  "\005\")\n\016BatteryVoltage\022\027\n\017battery_voltage\030\001"
  " \001(\001\",\n\016BatteryPercent\022\032\n\022battery_percen"
  "tage\030\001 \001(\005\"\254\003\n\007GPSData\022\020\n\010latitude\030\001 \001(\005"
  "\022\021\n\tlongitude\030\002 \001(\005\022\031\n\021heading_of_motion"
  "\030\003 \001(\005\022\024\n\014number_of_sv\030\004 \001(\r\022\014\n\004hDOP\030\005 \001"
  "(\r\022\030\n\020height_above_sea\030\006 \001(\005\022\024\n\014ground_s"
  "peed\030\007 \001(\005\022+\n\007quality\030\010 \001(\0162\032.sensors.GP"
  "SData.quality_t\022\014\n\004year\030\t \001(\005\022\r\n\005month\030\n"
  " \001(\005\022\013\n\003day\030\013 \001(\005\022\014\n\004hour\030\014 \001(\005\022\016\n\006minut"
  "e\030\r \001(\005\022\016\n\006second\030\016 \001(\005\"\207\001\n\tquality_t\022\n\n"
  "\006no_fix\020\000\022\026\n\022standard_gps_2d_3d\020\001\022\024\n\020dif"
  "ferential_gps\020\002\022\026\n\022rtk_fixed_solution\020\004\022"
  "\026\n\022rtk_float_solution\020\005\022\020\n\014estimated_dr\020"
  "\006\"\321\001\n\013EncoderData\022\022\n\nleft_angle\030\001 \001(\002\022\023\n"
  "\013right_angle\030\002 \001(\002\022\031\n\021fl_caster_degrees\030"
  "\003 \001(\002\022\031\n\021bl_caster_degrees\030\004 \001(\002\022\031\n\021fr_c"
  "aster_degrees\030\005 \001(\002\022\031\n\021br_caster_degrees"
  "\030\006 \001(\002\022-\n\ttimestamp\030\007 \001(\0132\032.google.proto"
  "buf.Timestamp\"\'\n\004Vec3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002\022\t\n\001z\030\003 \001(\002\"2\n\004Vec4\022\t\n\001w\030\001 \001(\002\022\t\n\001x\030\002"
  " \001(\002\022\t\n\001y\030\003 \001(\002\022\t\n\001z\030\004 \001(\002\"\204\001\n\007IrFrame\022\r"
  "\n\005frame\030\001 \001(\014\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003"
  " \001(\005\022\016\n\006camera\030\004 \001(\t\022\014\n\004size\030\005 \001(\005\022-\n\tti"
  "mestamp\030\006 \001(\0132\032.google.protobuf.Timestam"
  "p\"\207\002\n\010AhrsData\022&\n\017linear_velocity\030\001 \001(\0132"
  "\r.sensors.Vec3\022*\n\023linear_acceleration\030\002 "
  "\001(\0132\r.sensors.Vec3\022\'\n\020angular_velocity\030\003"
  " \001(\0132\r.sensors.Vec3\022+\n\024angular_accelerat"
  "ion\030\004 \001(\0132\r.sensors.Vec3\022\"\n\013orientation\030"
  "\005 \001(\0132\r.sensors.Vec4\022-\n\ttimestamp\030\006 \001(\0132"
  "\032.google.protobuf.Timestamp\":\n\016RemoteJsV"
  "alues\022\024\n\014forward_back\030\001 \001(\005\022\022\n\nleft_righ"
  "t\030\002 \001(\005\",\n\010ModeCtrl\022 \n\004mode\030\001 \001(\0162\022.sens"
  "ors.DriveMode\"4\n\010RampMode\022\021\n\tramp_mode\030\001"
  " \001(\010\022\025\n\rramp_approach\030\002 \001(\010\"b\n\020RampAssis"
  "tStates\022\r\n\005state\030\001 \001(\010\022\020\n\010approach\030\002 \001(\010"
  "\022-\n\ttimestamp\030\003 \001(\0132\032.google.protobuf.Ti"
  "mestamp*3\n\003Imu\022\013\n\007UNKNOWN\020\000\022\r\n\tFOOTPLATE"
  "\020\001\022\007\n\003MPU\020\002\022\007\n\003ALL\020\003*2\n\tDriveMode\022\010\n\004USE"
  "R\020\000\022\013\n\007ENGAGED\020\001\022\016\n\nAUTONOMOUS\020\0022\207 \n\007Sen"
  "sors\022,\n\tTurnOnLed\022\014.sensors.Led\032\021.sensor"
  "s.Response\022-\n\nTurnOffLed\022\014.sensors.Led\032\021"
  ".sensors.Response\0228\n\020ActivateHmiState\022\021."
  "sensors.HmiState\032\021.sensors.Response\022:\n\022D"
  "eactivateHmiState\022\021.sensors.HmiState\032\021.s"
  "ensors.Response\022E\n\024SetNavigationScaling\022"
  "\032.sensors.NavigationScaling\032\021.sensors.Re"
  "sponse\022>\n\020TurnOnUltrasonic\022\027.sensors.Ult"
  "rasonicCtrl\032\021.sensors.Response\022\?\n\021TurnOf"
  "fUltrasonic\022\027.sensors.UltrasonicCtrl\032\021.s"
  "ensors.Response\0224\n\013TurnOnRadar\022\022.sensors"
  ".RadarCtrl\032\021.sensors.Response\0225\n\014TurnOff"
  "Radar\022\022.sensors.RadarCtrl\032\021.sensors.Resp"
  "onse\0224\n\013BootloadImu\022\020.sensors.ImuCtrl\032\021."
  "sensors.Response0\001\022C\n\026DFGetCurrentParame"
  "ters\022\026.google.protobuf.Empty\032\021.sensors.R"
  "esponse\022@\n\023DFGetBufferedEvents\022\026.google."
  "protobuf.Empty\032\021.sensors.Response\0228\n\013Dis"
  "ableLuci\022\026.google.protobuf.Empty\032\021.senso"
  "rs.Response\0228\n\nJsOverride\022\027.sensors.Remo"
  "teJsValues\032\021.sensors.Response\0224\n\014SetDriv"
  "eMode\022\021.sensors.ModeCtrl\032\021.sensors.Respo"
  "nse\0223\n\013SetRampMode\022\021.sensors.RampMode\032\021."
  "sensors.Response\022=\n\tHmiStream\022\026.google.p"
  "rotobuf.Empty\032\026.sensors.HmiStreamData0\001\022"
  "J\n\020PressCountStream\022\025.sensors.PressReque"
  "st\032\035.sensors.PressCountStreamData0\001\022J\n\020U"
  "ltrasonicStream\022\026.google.protobuf.Empty\032"
  "\034.sensors.UltrasonicDistances0\001\022I\n\023RawUl"
  "trasonicStream\022\026.google.protobuf.Empty\032\030"
  ".sensors.UltrasonicCurve0\001\022=\n\013RadarStrea"
  "m\022\026.google.protobuf.Empty\032\024.sensors.Rada"
  "rPoints0\001\022@\n\016RawRadarStream\022\026.google.pro"
  "tobuf.Empty\032\024.sensors.RadarPoints0\001\022A\n\020C"
  "hairSpeedStream\022\026.google.protobuf.Empty\032"
  "\023.sensors.ChairSpeed0\001\0221\n\tImuStream\022\020.se"
  "nsors.ImuCtrl\032\020.sensors.ImuData0\001\022\?\n\017Cha"
  "irModeStream\022\026.google.protobuf.Empty\032\022.s"
  "ensors.ChairMode0\001\022E\n\022ChairProfileStream"
  "\022\026.google.protobuf.Empty\032\025.sensors.Chair"
  "Profile0\001\022E\n\022SpeedSettingStream\022\026.google"
  ".protobuf.Empty\032\025.sensors.SpeedSetting0\001"
  "\022=\n\016JoystickStream\022\026.google.protobuf.Emp"
  "ty\032\021.sensors.Joystick0\001\022H\n\025VirtualJoysti"
  "ckStream\022\026.google.protobuf.Empty\032\025.senso"
  "rs.JoystickData0\001\022I\n\026PhysicalJoystickStr"
  "eam\022\026.google.protobuf.Empty\032\025.sensors.Jo"
  "ystickData0\001\022G\n\024ScaledJoystickStream\022\026.g"
  "oogle.protobuf.Empty\032\025.sensors.JoystickD"
  "ata0\001\0229\n\nAhrsStream\022\026.google.protobuf.Em"
  "pty\032\021.sensors.AhrsData0\001\022R\n\033RadarClosest"
  "ObstaclesStream\022\026.google.protobuf.Empty\032"
  "\031.sensors.ClosestObstacles0\001\022W\n Ultrason"
  "icClosestObstaclesStream\022\026.google.protob"
  "uf.Empty\032\031.sensors.ClosestObstacles0\001\022\\\n"
  "%CameraCollisionClosestObstaclesStream\022\026"
  ".google.protobuf.Empty\032\031.sensors.Closest"
  "Obstacles0\001\022Q\n\032StepClosestObstaclesStrea"
  "m\022\026.google.protobuf.Empty\032\031.sensors.Clos"
  "estObstacles0\001\022T\n\035DropoffClosestObstacle"
  "sStream\022\026.google.protobuf.Empty\032\031.sensor"
  "s.ClosestObstacles0\001\022E\n\rScalingStream\022\026."
  "google.protobuf.Empty\032\032.sensors.Navigati"
  "onScaling0\001\022I\n\024BatteryVoltageStream\022\026.go"
  "ogle.protobuf.Empty\032\027.sensors.BatteryVol"
  "tage0\001\022I\n\024BatteryPercentStream\022\026.google."
  "protobuf.Empty\032\027.sensors.BatteryPercent0"
  "\001\022\?\n\014CameraStream\022\026.google.protobuf.Empt"
  "y\032\025.sensors.CameraPoints0\001\022E\n\020FlatCamera"
  "Stream\022\026.google.protobuf.Empty\032\027.sensors"
  ".CameraPoints2D0\001\022F\n\023DropoffCameraStream"
  "\022\026.google.protobuf.Empty\032\025.sensors.Camer"
  "aPoints0\001\0227\n\tGPSStream\022\026.google.protobuf"
  ".Empty\032\020.sensors.GPSData0\001\022E\n\022SeatPressu"
  "reStream\022\026.google.protobuf.Empty\032\025.senso"
  "rs.SeatPressure0\001\022L\n\031DFParametersChanged"
  "Stream\022\026.google.protobuf.Empty\032\025.sensors"
  ".DFParameters0\001\022\?\n\rDFEventStream\022\026.googl"
  "e.protobuf.Empty\032\024.sensors.DFSeatEvent0\001"
  "\0226\n\013SendLogging\022\024.sensors.LoggingData\032\021."
  "sensors.Response\022\?\n\rLoggingStream\022\026.goog"
  "le.protobuf.Empty\032\024.sensors.LoggingData0"
  "\001\022C\n\020StepCameraStream\022\026.google.protobuf."
  "Empty\032\025.sensors.CameraPoints0\001\0226\n\010IrStre"
  "am\022\026.google.protobuf.Empty\032\020.sensors.IrF"
  "rame0\001\022G\n\020RampAssistStream\022\026.google.prot"
  "obuf.Empty\032\031.sensors.RampAssistStates0\001\022"
  "=\n\nDistStream\022\026.google.protobuf.Empty\032\025."
  "sensors.DistanceData0\001\022C\n\017StartModeStrea"
  "m\022\026.google.protobuf.Empty\032\026.sensors.Star"
  "tModeData0\001\022U\n\032AudioPlaybackRequestStrea"
  "m\022\026.google.protobuf.Empty\032\035.sensors.Audi"
  "oPlaybackRequest0\001\022D\n\021GetZoneBoundaries\022"
  "\026.google.protobuf.Empty\032\027.sensors.ZoneBo"
  "undaries\022@\n\017GetBlockedZones\022\026.google.pro"
  "tobuf.Empty\032\025.sensors.BlockedZones\022D\n\021Ge"
  "tJoystickRanges\022\026.google.protobuf.Empty\032"
  "\027.sensors.JoystickRanges\022>\n\021EnableRadarF"
  "ilter\022\024.sensors.RadarFilter\032\021.sensors.Re"
  "sponse\"\000\022\?\n\022DisableRadarFilter\022\024.sensors"
  ".RadarFilter\032\021.sensors.Response\"\000\022\?\n\rEnc"
  "oderStream\022\026.google.protobuf.Empty\032\024.sen"
  "sors.EncoderData0\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ptolemy_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ptolemy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ptolemy_2eproto = {
  false, false, 12346, descriptor_table_protodef_ptolemy_2eproto, "ptolemy.proto", 
  &descriptor_table_ptolemy_2eproto_once, descriptor_table_ptolemy_2eproto_deps, 2, 57,
  schemas, file_default_instances, TableStruct_ptolemy_2eproto::offsets,
  file_level_metadata_ptolemy_2eproto, file_level_enum_descriptors_ptolemy_2eproto, file_level_service_descriptors_ptolemy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_ptolemy_2eproto_getter() {
  return &descriptor_table_ptolemy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_ptolemy_2eproto(&descriptor_table_ptolemy_2eproto);
namespace sensors {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AudioPlaybackRequest_RequestedPlayback_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[0];
}
bool AudioPlaybackRequest_RequestedPlayback_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AudioPlaybackRequest_RequestedPlayback AudioPlaybackRequest::ERROR_DISABLE;
constexpr AudioPlaybackRequest_RequestedPlayback AudioPlaybackRequest::RequestedPlayback_MIN;
constexpr AudioPlaybackRequest_RequestedPlayback AudioPlaybackRequest::RequestedPlayback_MAX;
constexpr int AudioPlaybackRequest::RequestedPlayback_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* StartModeData_StartModes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[1];
}
bool StartModeData_StartModes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr StartModeData_StartModes StartModeData::UNKNOWN;
constexpr StartModeData_StartModes StartModeData::NORMAL;
constexpr StartModeData_StartModes StartModeData::AUTO;
constexpr StartModeData_StartModes StartModeData::DISABLED;
constexpr StartModeData_StartModes StartModeData::StartModes_MIN;
constexpr StartModeData_StartModes StartModeData::StartModes_MAX;
constexpr int StartModeData::StartModes_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFSeatEvent_EventGroup_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[2];
}
bool DFSeatEvent_EventGroup_IsValid(int value) {
  switch (value) {
    case 0:
    case 161:
    case 162:
    case 163:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DFSeatEvent_EventGroup DFSeatEvent::UNKNOWN_EVENT_GROUP;
constexpr DFSeatEvent_EventGroup DFSeatEvent::PRESSURE;
constexpr DFSeatEvent_EventGroup DFSeatEvent::WETNESS;
constexpr DFSeatEvent_EventGroup DFSeatEvent::INFLATION;
constexpr DFSeatEvent_EventGroup DFSeatEvent::EventGroup_MIN;
constexpr DFSeatEvent_EventGroup DFSeatEvent::EventGroup_MAX;
constexpr int DFSeatEvent::EventGroup_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DFSeatEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[3];
}
bool DFSeatEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr DFSeatEvent_EventType DFSeatEvent::UNKNOWN_PRESSURE_EVENT_TYPE;
constexpr DFSeatEvent_EventType DFSeatEvent::OUT_OF_SEAT;
constexpr DFSeatEvent_EventType DFSeatEvent::PRESSURE_HIGH;
constexpr DFSeatEvent_EventType DFSeatEvent::PRESSURE_LOW;
constexpr DFSeatEvent_EventType DFSeatEvent::OFFLOAD;
constexpr DFSeatEvent_EventType DFSeatEvent::PRESSURE_OK;
constexpr DFSeatEvent_EventType DFSeatEvent::EventType_MIN;
constexpr DFSeatEvent_EventType DFSeatEvent::EventType_MAX;
constexpr int DFSeatEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Led_Leds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[4];
}
bool Led_Leds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Led_Leds Led::UNKNOWN;
constexpr Led_Leds Led::SYSTEM_STATUS;
constexpr Led_Leds Led::SENSOR_OK;
constexpr Led_Leds Led::SENSOR_BLOCKED;
constexpr Led_Leds Led::SENSOR_ERROR;
constexpr Led_Leds Led::WIFI_CONNECTED;
constexpr Led_Leds Led::CELL_CONNECTED;
constexpr Led_Leds Led::BLUETOOTH_CONNECTED;
constexpr Led_Leds Led::Leds_MIN;
constexpr Led_Leds Led::Leds_MAX;
constexpr int Led::Leds_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HmiState_States_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[5];
}
bool HmiState_States_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HmiState_States HmiState::SETUP_APP_PULSE;
constexpr HmiState_States HmiState::REACTION_TEST_WAIT;
constexpr HmiState_States HmiState::REACTION_TEST_GO;
constexpr HmiState_States HmiState::SENSOR_SYSTEM_ERROR;
constexpr HmiState_States HmiState::NOMINAL_OFF;
constexpr HmiState_States HmiState::SENSOR_SYSTEM_OVERRIDE;
constexpr HmiState_States HmiState::LUCI_LOADING;
constexpr HmiState_States HmiState::SENSOR_BLOCKED;
constexpr HmiState_States HmiState::SYSTEM_OK;
constexpr HmiState_States HmiState::STABILITY_WARNING;
constexpr HmiState_States HmiState::STABILITY_DANGER;
constexpr HmiState_States HmiState::STABILITY_TIPPED;
constexpr HmiState_States HmiState::SENDING_LOGS;
constexpr HmiState_States HmiState::WIFI_SENDING;
constexpr HmiState_States HmiState::WIFI_AVAILABLE;
constexpr HmiState_States HmiState::CELL_SENDING;
constexpr HmiState_States HmiState::CELL_AVAILABLE;
constexpr HmiState_States HmiState::USER_KEY_LOW;
constexpr HmiState_States HmiState::USER_KEY_PRESENT;
constexpr HmiState_States HmiState::NO_ACTION;
constexpr HmiState_States HmiState::BUTTON_PRESSED;
constexpr HmiState_States HmiState::UPDATE_IN_PROGRESS;
constexpr HmiState_States HmiState::ALL_OFF;
constexpr HmiState_States HmiState::FLASH_LEDS;
constexpr HmiState_States HmiState::CHASE_LEDS;
constexpr HmiState_States HmiState::TEST_USER_KEY;
constexpr HmiState_States HmiState::TEST_WIFI;
constexpr HmiState_States HmiState::TEST_CELL;
constexpr HmiState_States HmiState::TEST_SENSOR_OK;
constexpr HmiState_States HmiState::TEST_SENSOR_WARNING;
constexpr HmiState_States HmiState::TEST_SENSOR_ERROR;
constexpr HmiState_States HmiState::TEST_LUCI_BUTTON;
constexpr HmiState_States HmiState::States_MIN;
constexpr HmiState_States HmiState::States_MAX;
constexpr int HmiState::States_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HmiStreamData_ButtonState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[6];
}
bool HmiStreamData_ButtonState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HmiStreamData_ButtonState HmiStreamData::PRESSED;
constexpr HmiStreamData_ButtonState HmiStreamData::RELEASED;
constexpr HmiStreamData_ButtonState HmiStreamData::ButtonState_MIN;
constexpr HmiStreamData_ButtonState HmiStreamData::ButtonState_MAX;
constexpr int HmiStreamData::ButtonState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicCtrl_Board_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[7];
}
bool UltrasonicCtrl_Board_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicCtrl_Board UltrasonicCtrl::UNKNOWN;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::MPU;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::IO_B_LEFT;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::IO_B_RIGHT;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::Board_MIN;
constexpr UltrasonicCtrl_Board UltrasonicCtrl::Board_MAX;
constexpr int UltrasonicCtrl::Board_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicDistance_Board_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[8];
}
bool UltrasonicDistance_Board_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicDistance_Board UltrasonicDistance::UNKNOWN;
constexpr UltrasonicDistance_Board UltrasonicDistance::MPU;
constexpr UltrasonicDistance_Board UltrasonicDistance::IO_B_LEFT;
constexpr UltrasonicDistance_Board UltrasonicDistance::IO_B_RIGHT;
constexpr UltrasonicDistance_Board UltrasonicDistance::Board_MIN;
constexpr UltrasonicDistance_Board UltrasonicDistance::Board_MAX;
constexpr int UltrasonicDistance::Board_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicCurve_Board_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[9];
}
bool UltrasonicCurve_Board_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UltrasonicCurve_Board UltrasonicCurve::UNKNOWN;
constexpr UltrasonicCurve_Board UltrasonicCurve::MPU;
constexpr UltrasonicCurve_Board UltrasonicCurve::IO_B_LEFT;
constexpr UltrasonicCurve_Board UltrasonicCurve::IO_B_RIGHT;
constexpr UltrasonicCurve_Board UltrasonicCurve::Board_MIN;
constexpr UltrasonicCurve_Board UltrasonicCurve::Board_MAX;
constexpr int UltrasonicCurve::Board_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarFilter_Filter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[10];
}
bool RadarFilter_Filter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarFilter_Filter RadarFilter::RANGE_CHOP;
constexpr RadarFilter_Filter RadarFilter::ORIGIN;
constexpr RadarFilter_Filter RadarFilter::FOV;
constexpr RadarFilter_Filter RadarFilter::PEAK;
constexpr RadarFilter_Filter RadarFilter::STICKY;
constexpr RadarFilter_Filter RadarFilter::EXTRA_STICKY;
constexpr RadarFilter_Filter RadarFilter::TRANSFORMS;
constexpr RadarFilter_Filter RadarFilter::ADAM;
constexpr RadarFilter_Filter RadarFilter::Filter_MIN;
constexpr RadarFilter_Filter RadarFilter::Filter_MAX;
constexpr int RadarFilter::Filter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarCtrl_Radar_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[11];
}
bool RadarCtrl_Radar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarCtrl_Radar RadarCtrl::UNKNOWN;
constexpr RadarCtrl_Radar RadarCtrl::LEFT;
constexpr RadarCtrl_Radar RadarCtrl::RIGHT;
constexpr RadarCtrl_Radar RadarCtrl::FRONT;
constexpr RadarCtrl_Radar RadarCtrl::Radar_MIN;
constexpr RadarCtrl_Radar RadarCtrl::Radar_MAX;
constexpr int RadarCtrl::Radar_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarPoints_Radar_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[12];
}
bool RadarPoints_Radar_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RadarPoints_Radar RadarPoints::UNKNOWN;
constexpr RadarPoints_Radar RadarPoints::LEFT;
constexpr RadarPoints_Radar RadarPoints::RIGHT;
constexpr RadarPoints_Radar RadarPoints::FRONT;
constexpr RadarPoints_Radar RadarPoints::Radar_MIN;
constexpr RadarPoints_Radar RadarPoints::Radar_MAX;
constexpr int RadarPoints::Radar_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImuData_CalibrationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[13];
}
bool ImuData_CalibrationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ImuData_CalibrationStatus ImuData::NOT_CALIBRATED;
constexpr ImuData_CalibrationStatus ImuData::IN_PROGRESS;
constexpr ImuData_CalibrationStatus ImuData::USABLE;
constexpr ImuData_CalibrationStatus ImuData::COMPLETE;
constexpr ImuData_CalibrationStatus ImuData::CalibrationStatus_MIN;
constexpr ImuData_CalibrationStatus ImuData::CalibrationStatus_MAX;
constexpr int ImuData::CalibrationStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GPSData_quality_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[14];
}
bool GPSData_quality_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GPSData_quality_t GPSData::no_fix;
constexpr GPSData_quality_t GPSData::standard_gps_2d_3d;
constexpr GPSData_quality_t GPSData::differential_gps;
constexpr GPSData_quality_t GPSData::rtk_fixed_solution;
constexpr GPSData_quality_t GPSData::rtk_float_solution;
constexpr GPSData_quality_t GPSData::estimated_dr;
constexpr GPSData_quality_t GPSData::quality_t_MIN;
constexpr GPSData_quality_t GPSData::quality_t_MAX;
constexpr int GPSData::quality_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Imu_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[15];
}
bool Imu_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DriveMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ptolemy_2eproto);
  return file_level_enum_descriptors_ptolemy_2eproto[16];
}
bool DriveMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AudioPlaybackRequest::_Internal {
 public:
};

AudioPlaybackRequest::AudioPlaybackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.AudioPlaybackRequest)
}
AudioPlaybackRequest::AudioPlaybackRequest(const AudioPlaybackRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  requested_playback_ = from.requested_playback_;
  // @@protoc_insertion_point(copy_constructor:sensors.AudioPlaybackRequest)
}

void AudioPlaybackRequest::SharedCtor() {
requested_playback_ = 0;
}

AudioPlaybackRequest::~AudioPlaybackRequest() {
  // @@protoc_insertion_point(destructor:sensors.AudioPlaybackRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AudioPlaybackRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioPlaybackRequest::ArenaDtor(void* object) {
  AudioPlaybackRequest* _this = reinterpret_cast< AudioPlaybackRequest* >(object);
  (void)_this;
}
void AudioPlaybackRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AudioPlaybackRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioPlaybackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.AudioPlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requested_playback_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioPlaybackRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.AudioPlaybackRequest.RequestedPlayback requested_playback = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_requested_playback(static_cast<::sensors::AudioPlaybackRequest_RequestedPlayback>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AudioPlaybackRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.AudioPlaybackRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.AudioPlaybackRequest.RequestedPlayback requested_playback = 1;
  if (this->_internal_requested_playback() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_requested_playback(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.AudioPlaybackRequest)
  return target;
}

size_t AudioPlaybackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.AudioPlaybackRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.AudioPlaybackRequest.RequestedPlayback requested_playback = 1;
  if (this->_internal_requested_playback() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_requested_playback());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioPlaybackRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioPlaybackRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioPlaybackRequest::GetClassData() const { return &_class_data_; }

void AudioPlaybackRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioPlaybackRequest *>(to)->MergeFrom(
      static_cast<const AudioPlaybackRequest &>(from));
}


void AudioPlaybackRequest::MergeFrom(const AudioPlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.AudioPlaybackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_requested_playback() != 0) {
    _internal_set_requested_playback(from._internal_requested_playback());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioPlaybackRequest::CopyFrom(const AudioPlaybackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.AudioPlaybackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPlaybackRequest::IsInitialized() const {
  return true;
}

void AudioPlaybackRequest::InternalSwap(AudioPlaybackRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(requested_playback_, other->requested_playback_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioPlaybackRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[0]);
}

// ===================================================================

class PressRequest::_Internal {
 public:
};

PressRequest::PressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.PressRequest)
}
PressRequest::PressRequest(const PressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ramp_assist_ = from.ramp_assist_;
  // @@protoc_insertion_point(copy_constructor:sensors.PressRequest)
}

void PressRequest::SharedCtor() {
ramp_assist_ = false;
}

PressRequest::~PressRequest() {
  // @@protoc_insertion_point(destructor:sensors.PressRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PressRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PressRequest::ArenaDtor(void* object) {
  PressRequest* _this = reinterpret_cast< PressRequest* >(object);
  (void)_this;
}
void PressRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.PressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ramp_assist_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ramp_assist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ramp_assist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.PressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ramp_assist = 1;
  if (this->_internal_ramp_assist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ramp_assist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.PressRequest)
  return target;
}

size_t PressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.PressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ramp_assist = 1;
  if (this->_internal_ramp_assist() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PressRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PressRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PressRequest::GetClassData() const { return &_class_data_; }

void PressRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PressRequest *>(to)->MergeFrom(
      static_cast<const PressRequest &>(from));
}


void PressRequest::MergeFrom(const PressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.PressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ramp_assist() != 0) {
    _internal_set_ramp_assist(from._internal_ramp_assist());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PressRequest::CopyFrom(const PressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.PressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressRequest::IsInitialized() const {
  return true;
}

void PressRequest::InternalSwap(PressRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ramp_assist_, other->ramp_assist_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PressRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[1]);
}

// ===================================================================

class ZoneBoundary::_Internal {
 public:
};

ZoneBoundary::ZoneBoundary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  polygon_(arena),
  critical_point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ZoneBoundary)
}
ZoneBoundary::ZoneBoundary(const ZoneBoundary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      polygon_(from.polygon_),
      critical_point_(from.critical_point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensors.ZoneBoundary)
}

void ZoneBoundary::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ZoneBoundary::~ZoneBoundary() {
  // @@protoc_insertion_point(destructor:sensors.ZoneBoundary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZoneBoundary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ZoneBoundary::ArenaDtor(void* object) {
  ZoneBoundary* _this = reinterpret_cast< ZoneBoundary* >(object);
  (void)_this;
}
void ZoneBoundary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneBoundary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneBoundary::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ZoneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  polygon_.Clear();
  critical_point_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneBoundary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point2D polygon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_polygon(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .sensors.Point2D critical_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_critical_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.ZoneBoundary.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoneBoundary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ZoneBoundary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point2D polygon = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_polygon_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_polygon(i), target, stream);
  }

  // repeated .sensors.Point2D critical_point = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_critical_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_critical_point(i), target, stream);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.ZoneBoundary.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ZoneBoundary)
  return target;
}

size_t ZoneBoundary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ZoneBoundary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point2D polygon = 1;
  total_size += 1UL * this->_internal_polygon_size();
  for (const auto& msg : this->polygon_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sensors.Point2D critical_point = 2;
  total_size += 1UL * this->_internal_critical_point_size();
  for (const auto& msg : this->critical_point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZoneBoundary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZoneBoundary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZoneBoundary::GetClassData() const { return &_class_data_; }

void ZoneBoundary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZoneBoundary *>(to)->MergeFrom(
      static_cast<const ZoneBoundary &>(from));
}


void ZoneBoundary::MergeFrom(const ZoneBoundary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ZoneBoundary)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_.MergeFrom(from.polygon_);
  critical_point_.MergeFrom(from.critical_point_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneBoundary::CopyFrom(const ZoneBoundary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ZoneBoundary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneBoundary::IsInitialized() const {
  return true;
}

void ZoneBoundary::InternalSwap(ZoneBoundary* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  polygon_.InternalSwap(&other->polygon_);
  critical_point_.InternalSwap(&other->critical_point_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneBoundary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[2]);
}

// ===================================================================

class ZoneBoundaries::_Internal {
 public:
};

ZoneBoundaries::ZoneBoundaries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  zone_boundary_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ZoneBoundaries)
}
ZoneBoundaries::ZoneBoundaries(const ZoneBoundaries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      zone_boundary_(from.zone_boundary_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.ZoneBoundaries)
}

void ZoneBoundaries::SharedCtor() {
}

ZoneBoundaries::~ZoneBoundaries() {
  // @@protoc_insertion_point(destructor:sensors.ZoneBoundaries)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ZoneBoundaries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZoneBoundaries::ArenaDtor(void* object) {
  ZoneBoundaries* _this = reinterpret_cast< ZoneBoundaries* >(object);
  (void)_this;
}
void ZoneBoundaries::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZoneBoundaries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ZoneBoundaries::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ZoneBoundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  zone_boundary_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZoneBoundaries::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.ZoneBoundary zone_boundary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_zone_boundary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZoneBoundaries::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ZoneBoundaries)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.ZoneBoundary zone_boundary = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_zone_boundary_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_zone_boundary(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ZoneBoundaries)
  return target;
}

size_t ZoneBoundaries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ZoneBoundaries)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.ZoneBoundary zone_boundary = 1;
  total_size += 1UL * this->_internal_zone_boundary_size();
  for (const auto& msg : this->zone_boundary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ZoneBoundaries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ZoneBoundaries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ZoneBoundaries::GetClassData() const { return &_class_data_; }

void ZoneBoundaries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ZoneBoundaries *>(to)->MergeFrom(
      static_cast<const ZoneBoundaries &>(from));
}


void ZoneBoundaries::MergeFrom(const ZoneBoundaries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ZoneBoundaries)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  zone_boundary_.MergeFrom(from.zone_boundary_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ZoneBoundaries::CopyFrom(const ZoneBoundaries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ZoneBoundaries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneBoundaries::IsInitialized() const {
  return true;
}

void ZoneBoundaries::InternalSwap(ZoneBoundaries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  zone_boundary_.InternalSwap(&other->zone_boundary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ZoneBoundaries::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[3]);
}

// ===================================================================

class BlockedZone::_Internal {
 public:
};

BlockedZone::BlockedZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.BlockedZone)
}
BlockedZone::BlockedZone(const BlockedZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sensor().empty()) {
    sensor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sensor(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sensors.BlockedZone)
}

void BlockedZone::SharedCtor() {
sensor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlockedZone::~BlockedZone() {
  // @@protoc_insertion_point(destructor:sensors.BlockedZone)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockedZone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sensor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockedZone::ArenaDtor(void* object) {
  BlockedZone* _this = reinterpret_cast< BlockedZone* >(object);
  (void)_this;
}
void BlockedZone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockedZone::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BlockedZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  sensor_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string sensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sensor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.BlockedZone.sensor"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BlockedZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // string sensor = 2;
  if (!this->_internal_sensor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sensor().data(), static_cast<int>(this->_internal_sensor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.BlockedZone.sensor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sensor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BlockedZone)
  return target;
}

size_t BlockedZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BlockedZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string sensor = 2;
  if (!this->_internal_sensor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sensor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockedZone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockedZone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockedZone::GetClassData() const { return &_class_data_; }

void BlockedZone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockedZone *>(to)->MergeFrom(
      static_cast<const BlockedZone &>(from));
}


void BlockedZone::MergeFrom(const BlockedZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BlockedZone)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!from._internal_sensor().empty()) {
    _internal_set_sensor(from._internal_sensor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockedZone::CopyFrom(const BlockedZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BlockedZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedZone::IsInitialized() const {
  return true;
}

void BlockedZone::InternalSwap(BlockedZone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sensor_, lhs_arena,
      &other->sensor_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedZone::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[4]);
}

// ===================================================================

class BlockedZones::_Internal {
 public:
};

BlockedZones::BlockedZones(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  blocked_zones_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.BlockedZones)
}
BlockedZones::BlockedZones(const BlockedZones& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocked_zones_(from.blocked_zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.BlockedZones)
}

void BlockedZones::SharedCtor() {
}

BlockedZones::~BlockedZones() {
  // @@protoc_insertion_point(destructor:sensors.BlockedZones)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BlockedZones::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BlockedZones::ArenaDtor(void* object) {
  BlockedZones* _this = reinterpret_cast< BlockedZones* >(object);
  (void)_this;
}
void BlockedZones::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedZones::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlockedZones::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BlockedZones)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocked_zones_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedZones::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.BlockedZone blocked_zones = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocked_zones(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedZones::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BlockedZones)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.BlockedZone blocked_zones = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocked_zones_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocked_zones(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BlockedZones)
  return target;
}

size_t BlockedZones::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BlockedZones)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.BlockedZone blocked_zones = 1;
  total_size += 1UL * this->_internal_blocked_zones_size();
  for (const auto& msg : this->blocked_zones_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlockedZones::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlockedZones::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlockedZones::GetClassData() const { return &_class_data_; }

void BlockedZones::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlockedZones *>(to)->MergeFrom(
      static_cast<const BlockedZones &>(from));
}


void BlockedZones::MergeFrom(const BlockedZones& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BlockedZones)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocked_zones_.MergeFrom(from.blocked_zones_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlockedZones::CopyFrom(const BlockedZones& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BlockedZones)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedZones::IsInitialized() const {
  return true;
}

void BlockedZones::InternalSwap(BlockedZones* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  blocked_zones_.InternalSwap(&other->blocked_zones_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedZones::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[5]);
}

// ===================================================================

class JoystickRange::_Internal {
 public:
};

JoystickRange::JoystickRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.JoystickRange)
}
JoystickRange::JoystickRange(const JoystickRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&begin_, &from.begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  // @@protoc_insertion_point(copy_constructor:sensors.JoystickRange)
}

void JoystickRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&begin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&begin_)) + sizeof(end_));
}

JoystickRange::~JoystickRange() {
  // @@protoc_insertion_point(destructor:sensors.JoystickRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoystickRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoystickRange::ArenaDtor(void* object) {
  JoystickRange* _this = reinterpret_cast< JoystickRange* >(object);
  (void)_this;
}
void JoystickRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoystickRange::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.JoystickRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&begin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_) -
      reinterpret_cast<char*>(&begin_)) + sizeof(end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          begin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.JoystickRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float begin = 1;
  if (!(this->_internal_begin() <= 0 && this->_internal_begin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_begin(), target);
  }

  // float end = 2;
  if (!(this->_internal_end() <= 0 && this->_internal_end() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.JoystickRange)
  return target;
}

size_t JoystickRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.JoystickRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float begin = 1;
  if (!(this->_internal_begin() <= 0 && this->_internal_begin() >= 0)) {
    total_size += 1 + 4;
  }

  // float end = 2;
  if (!(this->_internal_end() <= 0 && this->_internal_end() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoystickRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoystickRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoystickRange::GetClassData() const { return &_class_data_; }

void JoystickRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoystickRange *>(to)->MergeFrom(
      static_cast<const JoystickRange &>(from));
}


void JoystickRange::MergeFrom(const JoystickRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.JoystickRange)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_begin() <= 0 && from._internal_begin() >= 0)) {
    _internal_set_begin(from._internal_begin());
  }
  if (!(from._internal_end() <= 0 && from._internal_end() >= 0)) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoystickRange::CopyFrom(const JoystickRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.JoystickRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickRange::IsInitialized() const {
  return true;
}

void JoystickRange::InternalSwap(JoystickRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoystickRange, end_)
      + sizeof(JoystickRange::end_)
      - PROTOBUF_FIELD_OFFSET(JoystickRange, begin_)>(
          reinterpret_cast<char*>(&begin_),
          reinterpret_cast<char*>(&other->begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[6]);
}

// ===================================================================

class JoystickRanges::_Internal {
 public:
};

JoystickRanges::JoystickRanges(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  joystick_ranges_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.JoystickRanges)
}
JoystickRanges::JoystickRanges(const JoystickRanges& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      joystick_ranges_(from.joystick_ranges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.JoystickRanges)
}

void JoystickRanges::SharedCtor() {
}

JoystickRanges::~JoystickRanges() {
  // @@protoc_insertion_point(destructor:sensors.JoystickRanges)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoystickRanges::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void JoystickRanges::ArenaDtor(void* object) {
  JoystickRanges* _this = reinterpret_cast< JoystickRanges* >(object);
  (void)_this;
}
void JoystickRanges::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickRanges::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoystickRanges::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.JoystickRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joystick_ranges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickRanges::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.JoystickRange joystick_ranges = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_joystick_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickRanges::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.JoystickRanges)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.JoystickRange joystick_ranges = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joystick_ranges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_joystick_ranges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.JoystickRanges)
  return target;
}

size_t JoystickRanges::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.JoystickRanges)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.JoystickRange joystick_ranges = 1;
  total_size += 1UL * this->_internal_joystick_ranges_size();
  for (const auto& msg : this->joystick_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoystickRanges::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoystickRanges::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoystickRanges::GetClassData() const { return &_class_data_; }

void JoystickRanges::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoystickRanges *>(to)->MergeFrom(
      static_cast<const JoystickRanges &>(from));
}


void JoystickRanges::MergeFrom(const JoystickRanges& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.JoystickRanges)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  joystick_ranges_.MergeFrom(from.joystick_ranges_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoystickRanges::CopyFrom(const JoystickRanges& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.JoystickRanges)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickRanges::IsInitialized() const {
  return true;
}

void JoystickRanges::InternalSwap(JoystickRanges* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  joystick_ranges_.InternalSwap(&other->joystick_ranges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickRanges::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[7]);
}

// ===================================================================

class StartModeData::_Internal {
 public:
};

StartModeData::StartModeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  missing_devices_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.StartModeData)
}
StartModeData::StartModeData(const StartModeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      missing_devices_(from.missing_devices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:sensors.StartModeData)
}

void StartModeData::SharedCtor() {
mode_ = 0;
}

StartModeData::~StartModeData() {
  // @@protoc_insertion_point(destructor:sensors.StartModeData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StartModeData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StartModeData::ArenaDtor(void* object) {
  StartModeData* _this = reinterpret_cast< StartModeData* >(object);
  (void)_this;
}
void StartModeData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartModeData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StartModeData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.StartModeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  missing_devices_.Clear();
  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartModeData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.StartModeData.StartModes mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::sensors::StartModeData_StartModes>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string missing_devices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_missing_devices();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.StartModeData.missing_devices"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartModeData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.StartModeData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.StartModeData.StartModes mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // repeated string missing_devices = 2;
  for (int i = 0, n = this->_internal_missing_devices_size(); i < n; i++) {
    const auto& s = this->_internal_missing_devices(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.StartModeData.missing_devices");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.StartModeData)
  return target;
}

size_t StartModeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.StartModeData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string missing_devices = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(missing_devices_.size());
  for (int i = 0, n = missing_devices_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      missing_devices_.Get(i));
  }

  // .sensors.StartModeData.StartModes mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StartModeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StartModeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StartModeData::GetClassData() const { return &_class_data_; }

void StartModeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StartModeData *>(to)->MergeFrom(
      static_cast<const StartModeData &>(from));
}


void StartModeData::MergeFrom(const StartModeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.StartModeData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  missing_devices_.MergeFrom(from.missing_devices_);
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StartModeData::CopyFrom(const StartModeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.StartModeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartModeData::IsInitialized() const {
  return true;
}

void StartModeData::InternalSwap(StartModeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  missing_devices_.InternalSwap(&other->missing_devices_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartModeData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[8]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reply().empty()) {
    reply_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reply(), 
      GetArenaForAllocation());
  }
  return_code_ = from.return_code_;
  // @@protoc_insertion_point(copy_constructor:sensors.Response)
}

void Response::SharedCtor() {
reply_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
return_code_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:sensors.Response)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reply_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reply_.ClearToEmpty();
  return_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reply = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reply();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.Response.reply"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 return_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          return_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reply = 1;
  if (!this->_internal_reply().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reply().data(), static_cast<int>(this->_internal_reply().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.Response.reply");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reply(), target);
  }

  // int32 return_code = 2;
  if (this->_internal_return_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_return_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reply = 1;
  if (!this->_internal_reply().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reply());
  }

  // int32 return_code = 2;
  if (this->_internal_return_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_return_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }

void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Response *>(to)->MergeFrom(
      static_cast<const Response &>(from));
}


void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Response)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reply().empty()) {
    _internal_set_reply(from._internal_reply());
  }
  if (from._internal_return_code() != 0) {
    _internal_set_return_code(from._internal_return_code());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reply_, lhs_arena,
      &other->reply_, rhs_arena
  );
  swap(return_code_, other->return_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[9]);
}

// ===================================================================

class DFParameters::_Internal {
 public:
};

DFParameters::DFParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.DFParameters)
}
DFParameters::DFParameters(const DFParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&df_timestamp_, &from.df_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&cap_update_period_) -
    reinterpret_cast<char*>(&df_timestamp_)) + sizeof(cap_update_period_));
  // @@protoc_insertion_point(copy_constructor:sensors.DFParameters)
}

void DFParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&df_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cap_update_period_) -
    reinterpret_cast<char*>(&df_timestamp_)) + sizeof(cap_update_period_));
}

DFParameters::~DFParameters() {
  // @@protoc_insertion_point(destructor:sensors.DFParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DFParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DFParameters::ArenaDtor(void* object) {
  DFParameters* _this = reinterpret_cast< DFParameters* >(object);
  (void)_this;
}
void DFParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DFParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.DFParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&df_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cap_update_period_) -
      reinterpret_cast<char*>(&df_timestamp_)) + sizeof(cap_update_period_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 df_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          df_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float target_pressure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          target_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float high_pressure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          high_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float low_pressure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          low_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float in_seat_pressure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          in_seat_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float off_load_pressure = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          off_load_pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 usb_update_period = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          usb_update_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cap_update_period = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          cap_update_period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.DFParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 df_timestamp = 1;
  if (this->_internal_df_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_df_timestamp(), target);
  }

  // float target_pressure = 2;
  if (!(this->_internal_target_pressure() <= 0 && this->_internal_target_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_target_pressure(), target);
  }

  // float high_pressure = 3;
  if (!(this->_internal_high_pressure() <= 0 && this->_internal_high_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_high_pressure(), target);
  }

  // float low_pressure = 4;
  if (!(this->_internal_low_pressure() <= 0 && this->_internal_low_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_low_pressure(), target);
  }

  // float in_seat_pressure = 5;
  if (!(this->_internal_in_seat_pressure() <= 0 && this->_internal_in_seat_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_in_seat_pressure(), target);
  }

  // float off_load_pressure = 6;
  if (!(this->_internal_off_load_pressure() <= 0 && this->_internal_off_load_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_off_load_pressure(), target);
  }

  // int32 usb_update_period = 7;
  if (this->_internal_usb_update_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_usb_update_period(), target);
  }

  // int32 cap_update_period = 8;
  if (this->_internal_cap_update_period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_cap_update_period(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.DFParameters)
  return target;
}

size_t DFParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.DFParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 df_timestamp = 1;
  if (this->_internal_df_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_df_timestamp());
  }

  // float target_pressure = 2;
  if (!(this->_internal_target_pressure() <= 0 && this->_internal_target_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float high_pressure = 3;
  if (!(this->_internal_high_pressure() <= 0 && this->_internal_high_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float low_pressure = 4;
  if (!(this->_internal_low_pressure() <= 0 && this->_internal_low_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float in_seat_pressure = 5;
  if (!(this->_internal_in_seat_pressure() <= 0 && this->_internal_in_seat_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // float off_load_pressure = 6;
  if (!(this->_internal_off_load_pressure() <= 0 && this->_internal_off_load_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 usb_update_period = 7;
  if (this->_internal_usb_update_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_usb_update_period());
  }

  // int32 cap_update_period = 8;
  if (this->_internal_cap_update_period() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cap_update_period());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DFParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DFParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DFParameters::GetClassData() const { return &_class_data_; }

void DFParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DFParameters *>(to)->MergeFrom(
      static_cast<const DFParameters &>(from));
}


void DFParameters::MergeFrom(const DFParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.DFParameters)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_df_timestamp() != 0) {
    _internal_set_df_timestamp(from._internal_df_timestamp());
  }
  if (!(from._internal_target_pressure() <= 0 && from._internal_target_pressure() >= 0)) {
    _internal_set_target_pressure(from._internal_target_pressure());
  }
  if (!(from._internal_high_pressure() <= 0 && from._internal_high_pressure() >= 0)) {
    _internal_set_high_pressure(from._internal_high_pressure());
  }
  if (!(from._internal_low_pressure() <= 0 && from._internal_low_pressure() >= 0)) {
    _internal_set_low_pressure(from._internal_low_pressure());
  }
  if (!(from._internal_in_seat_pressure() <= 0 && from._internal_in_seat_pressure() >= 0)) {
    _internal_set_in_seat_pressure(from._internal_in_seat_pressure());
  }
  if (!(from._internal_off_load_pressure() <= 0 && from._internal_off_load_pressure() >= 0)) {
    _internal_set_off_load_pressure(from._internal_off_load_pressure());
  }
  if (from._internal_usb_update_period() != 0) {
    _internal_set_usb_update_period(from._internal_usb_update_period());
  }
  if (from._internal_cap_update_period() != 0) {
    _internal_set_cap_update_period(from._internal_cap_update_period());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DFParameters::CopyFrom(const DFParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.DFParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFParameters::IsInitialized() const {
  return true;
}

void DFParameters::InternalSwap(DFParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DFParameters, cap_update_period_)
      + sizeof(DFParameters::cap_update_period_)
      - PROTOBUF_FIELD_OFFSET(DFParameters, df_timestamp_)>(
          reinterpret_cast<char*>(&df_timestamp_),
          reinterpret_cast<char*>(&other->df_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DFParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[10]);
}

// ===================================================================

class DFSeatEvent::_Internal {
 public:
};

DFSeatEvent::DFSeatEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.DFSeatEvent)
}
DFSeatEvent::DFSeatEvent(const DFSeatEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&current_timestamp_, &from.current_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&current_timestamp_)) + sizeof(event_type_));
  // @@protoc_insertion_point(copy_constructor:sensors.DFSeatEvent)
}

void DFSeatEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&current_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&current_timestamp_)) + sizeof(event_type_));
}

DFSeatEvent::~DFSeatEvent() {
  // @@protoc_insertion_point(destructor:sensors.DFSeatEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DFSeatEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DFSeatEvent::ArenaDtor(void* object) {
  DFSeatEvent* _this = reinterpret_cast< DFSeatEvent* >(object);
  (void)_this;
}
void DFSeatEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DFSeatEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DFSeatEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.DFSeatEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&current_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&current_timestamp_)) + sizeof(event_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DFSeatEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 event_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          event_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.DFSeatEvent.EventGroup group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_group(static_cast<::sensors::DFSeatEvent_EventGroup>(val));
        } else
          goto handle_unusual;
        continue;
      // .sensors.DFSeatEvent.EventType event_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::sensors::DFSeatEvent_EventType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DFSeatEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.DFSeatEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_timestamp = 1;
  if (this->_internal_current_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current_timestamp(), target);
  }

  // uint32 event_timestamp = 2;
  if (this->_internal_event_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_event_timestamp(), target);
  }

  // .sensors.DFSeatEvent.EventGroup group = 3;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_group(), target);
  }

  // .sensors.DFSeatEvent.EventType event_type = 4;
  if (this->_internal_event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.DFSeatEvent)
  return target;
}

size_t DFSeatEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.DFSeatEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 current_timestamp = 1;
  if (this->_internal_current_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_timestamp());
  }

  // uint32 event_timestamp = 2;
  if (this->_internal_event_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_event_timestamp());
  }

  // .sensors.DFSeatEvent.EventGroup group = 3;
  if (this->_internal_group() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_group());
  }

  // .sensors.DFSeatEvent.EventType event_type = 4;
  if (this->_internal_event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DFSeatEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DFSeatEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DFSeatEvent::GetClassData() const { return &_class_data_; }

void DFSeatEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DFSeatEvent *>(to)->MergeFrom(
      static_cast<const DFSeatEvent &>(from));
}


void DFSeatEvent::MergeFrom(const DFSeatEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.DFSeatEvent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_current_timestamp() != 0) {
    _internal_set_current_timestamp(from._internal_current_timestamp());
  }
  if (from._internal_event_timestamp() != 0) {
    _internal_set_event_timestamp(from._internal_event_timestamp());
  }
  if (from._internal_group() != 0) {
    _internal_set_group(from._internal_group());
  }
  if (from._internal_event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DFSeatEvent::CopyFrom(const DFSeatEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.DFSeatEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DFSeatEvent::IsInitialized() const {
  return true;
}

void DFSeatEvent::InternalSwap(DFSeatEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DFSeatEvent, event_type_)
      + sizeof(DFSeatEvent::event_type_)
      - PROTOBUF_FIELD_OFFSET(DFSeatEvent, current_timestamp_)>(
          reinterpret_cast<char*>(&current_timestamp_),
          reinterpret_cast<char*>(&other->current_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DFSeatEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[11]);
}

// ===================================================================

class DistanceData::_Internal {
 public:
};

DistanceData::DistanceData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.DistanceData)
}
DistanceData::DistanceData(const DistanceData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:sensors.DistanceData)
}

void DistanceData::SharedCtor() {
distance_ = 0;
}

DistanceData::~DistanceData() {
  // @@protoc_insertion_point(destructor:sensors.DistanceData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DistanceData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DistanceData::ArenaDtor(void* object) {
  DistanceData* _this = reinterpret_cast< DistanceData* >(object);
  (void)_this;
}
void DistanceData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DistanceData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistanceData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.DistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistanceData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.DistanceData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 distance = 1;
  if (this->_internal_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.DistanceData)
  return target;
}

size_t DistanceData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.DistanceData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 distance = 1;
  if (this->_internal_distance() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistanceData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistanceData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistanceData::GetClassData() const { return &_class_data_; }

void DistanceData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistanceData *>(to)->MergeFrom(
      static_cast<const DistanceData &>(from));
}


void DistanceData::MergeFrom(const DistanceData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.DistanceData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_distance() != 0) {
    _internal_set_distance(from._internal_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistanceData::CopyFrom(const DistanceData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.DistanceData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceData::IsInitialized() const {
  return true;
}

void DistanceData::InternalSwap(DistanceData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[12]);
}

// ===================================================================

class SeatPressure::_Internal {
 public:
};

SeatPressure::SeatPressure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.SeatPressure)
}
SeatPressure::SeatPressure(const SeatPressure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pressure_ = from.pressure_;
  // @@protoc_insertion_point(copy_constructor:sensors.SeatPressure)
}

void SeatPressure::SharedCtor() {
pressure_ = 0;
}

SeatPressure::~SeatPressure() {
  // @@protoc_insertion_point(destructor:sensors.SeatPressure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SeatPressure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SeatPressure::ArenaDtor(void* object) {
  SeatPressure* _this = reinterpret_cast< SeatPressure* >(object);
  (void)_this;
}
void SeatPressure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeatPressure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SeatPressure::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.SeatPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pressure_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SeatPressure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float pressure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          pressure_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeatPressure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.SeatPressure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float pressure = 1;
  if (!(this->_internal_pressure() <= 0 && this->_internal_pressure() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pressure(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.SeatPressure)
  return target;
}

size_t SeatPressure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.SeatPressure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pressure = 1;
  if (!(this->_internal_pressure() <= 0 && this->_internal_pressure() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SeatPressure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SeatPressure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SeatPressure::GetClassData() const { return &_class_data_; }

void SeatPressure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SeatPressure *>(to)->MergeFrom(
      static_cast<const SeatPressure &>(from));
}


void SeatPressure::MergeFrom(const SeatPressure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.SeatPressure)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_pressure() <= 0 && from._internal_pressure() >= 0)) {
    _internal_set_pressure(from._internal_pressure());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SeatPressure::CopyFrom(const SeatPressure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.SeatPressure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeatPressure::IsInitialized() const {
  return true;
}

void SeatPressure::InternalSwap(SeatPressure* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(pressure_, other->pressure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeatPressure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[13]);
}

// ===================================================================

class ObstacleValue_Linear::_Internal {
 public:
};

ObstacleValue_Linear::ObstacleValue_Linear(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue.Linear)
}
ObstacleValue_Linear::ObstacleValue_Linear(const ObstacleValue_Linear& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue.Linear)
}

void ObstacleValue_Linear::SharedCtor() {
distance_ = 0;
}

ObstacleValue_Linear::~ObstacleValue_Linear() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue.Linear)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleValue_Linear::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleValue_Linear::ArenaDtor(void* object) {
  ObstacleValue_Linear* _this = reinterpret_cast< ObstacleValue_Linear* >(object);
  (void)_this;
}
void ObstacleValue_Linear::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue_Linear::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue_Linear::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue_Linear::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue_Linear::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue.Linear)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue.Linear)
  return target;
}

size_t ObstacleValue_Linear::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue.Linear)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleValue_Linear::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleValue_Linear::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleValue_Linear::GetClassData() const { return &_class_data_; }

void ObstacleValue_Linear::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleValue_Linear *>(to)->MergeFrom(
      static_cast<const ObstacleValue_Linear &>(from));
}


void ObstacleValue_Linear::MergeFrom(const ObstacleValue_Linear& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue.Linear)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_distance() <= 0 && from._internal_distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleValue_Linear::CopyFrom(const ObstacleValue_Linear& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue.Linear)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue_Linear::IsInitialized() const {
  return true;
}

void ObstacleValue_Linear::InternalSwap(ObstacleValue_Linear* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue_Linear::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[14]);
}

// ===================================================================

class ObstacleValue_Angular::_Internal {
 public:
};

ObstacleValue_Angular::ObstacleValue_Angular(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue.Angular)
}
ObstacleValue_Angular::ObstacleValue_Angular(const ObstacleValue_Angular& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue.Angular)
}

void ObstacleValue_Angular::SharedCtor() {
angle_ = 0;
}

ObstacleValue_Angular::~ObstacleValue_Angular() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue.Angular)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleValue_Angular::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleValue_Angular::ArenaDtor(void* object) {
  ObstacleValue_Angular* _this = reinterpret_cast< ObstacleValue_Angular* >(object);
  (void)_this;
}
void ObstacleValue_Angular::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue_Angular::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue_Angular::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue.Angular)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue_Angular::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue_Angular::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue.Angular)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue.Angular)
  return target;
}

size_t ObstacleValue_Angular::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue.Angular)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float angle = 1;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleValue_Angular::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleValue_Angular::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleValue_Angular::GetClassData() const { return &_class_data_; }

void ObstacleValue_Angular::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleValue_Angular *>(to)->MergeFrom(
      static_cast<const ObstacleValue_Angular &>(from));
}


void ObstacleValue_Angular::MergeFrom(const ObstacleValue_Angular& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue.Angular)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_angle() <= 0 && from._internal_angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleValue_Angular::CopyFrom(const ObstacleValue_Angular& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue.Angular)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue_Angular::IsInitialized() const {
  return true;
}

void ObstacleValue_Angular::InternalSwap(ObstacleValue_Angular* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(angle_, other->angle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue_Angular::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[15]);
}

// ===================================================================

class ObstacleValue_Combo::_Internal {
 public:
};

ObstacleValue_Combo::ObstacleValue_Combo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue.Combo)
}
ObstacleValue_Combo::ObstacleValue_Combo(const ObstacleValue_Combo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue.Combo)
}

void ObstacleValue_Combo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&distance_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(angle_));
}

ObstacleValue_Combo::~ObstacleValue_Combo() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue.Combo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleValue_Combo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ObstacleValue_Combo::ArenaDtor(void* object) {
  ObstacleValue_Combo* _this = reinterpret_cast< ObstacleValue_Combo* >(object);
  (void)_this;
}
void ObstacleValue_Combo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue_Combo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue_Combo::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue.Combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue_Combo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue_Combo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue.Combo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_distance(), target);
  }

  // float angle = 2;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue.Combo)
  return target;
}

size_t ObstacleValue_Combo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue.Combo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float distance = 1;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float angle = 2;
  if (!(this->_internal_angle() <= 0 && this->_internal_angle() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleValue_Combo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleValue_Combo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleValue_Combo::GetClassData() const { return &_class_data_; }

void ObstacleValue_Combo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleValue_Combo *>(to)->MergeFrom(
      static_cast<const ObstacleValue_Combo &>(from));
}


void ObstacleValue_Combo::MergeFrom(const ObstacleValue_Combo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue.Combo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_distance() <= 0 && from._internal_distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (!(from._internal_angle() <= 0 && from._internal_angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleValue_Combo::CopyFrom(const ObstacleValue_Combo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue.Combo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue_Combo::IsInitialized() const {
  return true;
}

void ObstacleValue_Combo::InternalSwap(ObstacleValue_Combo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObstacleValue_Combo, angle_)
      + sizeof(ObstacleValue_Combo::angle_)
      - PROTOBUF_FIELD_OFFSET(ObstacleValue_Combo, distance_)>(
          reinterpret_cast<char*>(&distance_),
          reinterpret_cast<char*>(&other->distance_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue_Combo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[16]);
}

// ===================================================================

class ObstacleValue::_Internal {
 public:
  static const ::sensors::ObstacleValue_Linear& linear(const ObstacleValue* msg);
  static const ::sensors::ObstacleValue_Angular& angular(const ObstacleValue* msg);
  static const ::sensors::ObstacleValue_Combo& combo(const ObstacleValue* msg);
};

const ::sensors::ObstacleValue_Linear&
ObstacleValue::_Internal::linear(const ObstacleValue* msg) {
  return *msg->value_.linear_;
}
const ::sensors::ObstacleValue_Angular&
ObstacleValue::_Internal::angular(const ObstacleValue* msg) {
  return *msg->value_.angular_;
}
const ::sensors::ObstacleValue_Combo&
ObstacleValue::_Internal::combo(const ObstacleValue* msg) {
  return *msg->value_.combo_;
}
void ObstacleValue::set_allocated_linear(::sensors::ObstacleValue_Linear* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensors::ObstacleValue_Linear>::GetOwningArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    set_has_linear();
    value_.linear_ = linear;
  }
  // @@protoc_insertion_point(field_set_allocated:sensors.ObstacleValue.linear)
}
void ObstacleValue::set_allocated_angular(::sensors::ObstacleValue_Angular* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensors::ObstacleValue_Angular>::GetOwningArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    set_has_angular();
    value_.angular_ = angular;
  }
  // @@protoc_insertion_point(field_set_allocated:sensors.ObstacleValue.angular)
}
void ObstacleValue::set_allocated_combo(::sensors::ObstacleValue_Combo* combo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (combo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sensors::ObstacleValue_Combo>::GetOwningArena(combo);
    if (message_arena != submessage_arena) {
      combo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combo, submessage_arena);
    }
    set_has_combo();
    value_.combo_ = combo;
  }
  // @@protoc_insertion_point(field_set_allocated:sensors.ObstacleValue.combo)
}
ObstacleValue::ObstacleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ObstacleValue)
}
ObstacleValue::ObstacleValue(const ObstacleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kLinear: {
      _internal_mutable_linear()->::sensors::ObstacleValue_Linear::MergeFrom(from._internal_linear());
      break;
    }
    case kAngular: {
      _internal_mutable_angular()->::sensors::ObstacleValue_Angular::MergeFrom(from._internal_angular());
      break;
    }
    case kCombo: {
      _internal_mutable_combo()->::sensors::ObstacleValue_Combo::MergeFrom(from._internal_combo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:sensors.ObstacleValue)
}

void ObstacleValue::SharedCtor() {
clear_has_value();
}

ObstacleValue::~ObstacleValue() {
  // @@protoc_insertion_point(destructor:sensors.ObstacleValue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ObstacleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void ObstacleValue::ArenaDtor(void* object) {
  ObstacleValue* _this = reinterpret_cast< ObstacleValue* >(object);
  (void)_this;
}
void ObstacleValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObstacleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObstacleValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:sensors.ObstacleValue)
  switch (value_case()) {
    case kLinear: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.linear_;
      }
      break;
    }
    case kAngular: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.angular_;
      }
      break;
    }
    case kCombo: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.combo_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void ObstacleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ObstacleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObstacleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.ObstacleValue.Linear linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue.Angular angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue.Combo combo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_combo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObstacleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ObstacleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.ObstacleValue.Linear linear = 1;
  if (_internal_has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .sensors.ObstacleValue.Angular angular = 2;
  if (_internal_has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  // .sensors.ObstacleValue.Combo combo = 3;
  if (_internal_has_combo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::combo(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ObstacleValue)
  return target;
}

size_t ObstacleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ObstacleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .sensors.ObstacleValue.Linear linear = 1;
    case kLinear: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.linear_);
      break;
    }
    // .sensors.ObstacleValue.Angular angular = 2;
    case kAngular: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.angular_);
      break;
    }
    // .sensors.ObstacleValue.Combo combo = 3;
    case kCombo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.combo_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ObstacleValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ObstacleValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ObstacleValue::GetClassData() const { return &_class_data_; }

void ObstacleValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ObstacleValue *>(to)->MergeFrom(
      static_cast<const ObstacleValue &>(from));
}


void ObstacleValue::MergeFrom(const ObstacleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ObstacleValue)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kLinear: {
      _internal_mutable_linear()->::sensors::ObstacleValue_Linear::MergeFrom(from._internal_linear());
      break;
    }
    case kAngular: {
      _internal_mutable_angular()->::sensors::ObstacleValue_Angular::MergeFrom(from._internal_angular());
      break;
    }
    case kCombo: {
      _internal_mutable_combo()->::sensors::ObstacleValue_Combo::MergeFrom(from._internal_combo());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ObstacleValue::CopyFrom(const ObstacleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ObstacleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleValue::IsInitialized() const {
  return true;
}

void ObstacleValue::InternalSwap(ObstacleValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObstacleValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[17]);
}

// ===================================================================

class ClosestObstacles::_Internal {
 public:
  static const ::sensors::ObstacleValue& front(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& front_left(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& front_right(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& left(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& right(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& back_left(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& back_right(const ClosestObstacles* msg);
  static const ::sensors::ObstacleValue& back(const ClosestObstacles* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ClosestObstacles* msg);
};

const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::front(const ClosestObstacles* msg) {
  return *msg->front_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::front_left(const ClosestObstacles* msg) {
  return *msg->front_left_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::front_right(const ClosestObstacles* msg) {
  return *msg->front_right_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::left(const ClosestObstacles* msg) {
  return *msg->left_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::right(const ClosestObstacles* msg) {
  return *msg->right_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::back_left(const ClosestObstacles* msg) {
  return *msg->back_left_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::back_right(const ClosestObstacles* msg) {
  return *msg->back_right_;
}
const ::sensors::ObstacleValue&
ClosestObstacles::_Internal::back(const ClosestObstacles* msg) {
  return *msg->back_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ClosestObstacles::_Internal::timestamp(const ClosestObstacles* msg) {
  return *msg->timestamp_;
}
void ClosestObstacles::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ClosestObstacles::ClosestObstacles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ClosestObstacles)
}
ClosestObstacles::ClosestObstacles(const ClosestObstacles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_front()) {
    front_ = new ::sensors::ObstacleValue(*from.front_);
  } else {
    front_ = nullptr;
  }
  if (from._internal_has_front_left()) {
    front_left_ = new ::sensors::ObstacleValue(*from.front_left_);
  } else {
    front_left_ = nullptr;
  }
  if (from._internal_has_front_right()) {
    front_right_ = new ::sensors::ObstacleValue(*from.front_right_);
  } else {
    front_right_ = nullptr;
  }
  if (from._internal_has_left()) {
    left_ = new ::sensors::ObstacleValue(*from.left_);
  } else {
    left_ = nullptr;
  }
  if (from._internal_has_right()) {
    right_ = new ::sensors::ObstacleValue(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from._internal_has_back_left()) {
    back_left_ = new ::sensors::ObstacleValue(*from.back_left_);
  } else {
    back_left_ = nullptr;
  }
  if (from._internal_has_back_right()) {
    back_right_ = new ::sensors::ObstacleValue(*from.back_right_);
  } else {
    back_right_ = nullptr;
  }
  if (from._internal_has_back()) {
    back_ = new ::sensors::ObstacleValue(*from.back_);
  } else {
    back_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.ClosestObstacles)
}

void ClosestObstacles::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&front_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&front_)) + sizeof(timestamp_));
}

ClosestObstacles::~ClosestObstacles() {
  // @@protoc_insertion_point(destructor:sensors.ClosestObstacles)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ClosestObstacles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete front_;
  if (this != internal_default_instance()) delete front_left_;
  if (this != internal_default_instance()) delete front_right_;
  if (this != internal_default_instance()) delete left_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete back_left_;
  if (this != internal_default_instance()) delete back_right_;
  if (this != internal_default_instance()) delete back_;
  if (this != internal_default_instance()) delete timestamp_;
}

void ClosestObstacles::ArenaDtor(void* object) {
  ClosestObstacles* _this = reinterpret_cast< ClosestObstacles* >(object);
  (void)_this;
}
void ClosestObstacles::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClosestObstacles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClosestObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ClosestObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && front_ != nullptr) {
    delete front_;
  }
  front_ = nullptr;
  if (GetArenaForAllocation() == nullptr && front_left_ != nullptr) {
    delete front_left_;
  }
  front_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && front_right_ != nullptr) {
    delete front_right_;
  }
  front_right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && left_ != nullptr) {
    delete left_;
  }
  left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && right_ != nullptr) {
    delete right_;
  }
  right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_left_ != nullptr) {
    delete back_left_;
  }
  back_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_right_ != nullptr) {
    delete back_right_;
  }
  back_right_ = nullptr;
  if (GetArenaForAllocation() == nullptr && back_ != nullptr) {
    delete back_;
  }
  back_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClosestObstacles::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.ObstacleValue front = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_front(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue front_left = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue front_right = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_front_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue back_left = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_back_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue back_right = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_back_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ObstacleValue back = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_back(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosestObstacles::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ClosestObstacles)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.ObstacleValue front = 1;
  if (this->_internal_has_front()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::front(this), target, stream);
  }

  // .sensors.ObstacleValue front_left = 2;
  if (this->_internal_has_front_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::front_left(this), target, stream);
  }

  // .sensors.ObstacleValue front_right = 3;
  if (this->_internal_has_front_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::front_right(this), target, stream);
  }

  // .sensors.ObstacleValue left = 4;
  if (this->_internal_has_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::left(this), target, stream);
  }

  // .sensors.ObstacleValue right = 5;
  if (this->_internal_has_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::right(this), target, stream);
  }

  // .sensors.ObstacleValue back_left = 6;
  if (this->_internal_has_back_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::back_left(this), target, stream);
  }

  // .sensors.ObstacleValue back_right = 7;
  if (this->_internal_has_back_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::back_right(this), target, stream);
  }

  // .sensors.ObstacleValue back = 8;
  if (this->_internal_has_back()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::back(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ClosestObstacles)
  return target;
}

size_t ClosestObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ClosestObstacles)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.ObstacleValue front = 1;
  if (this->_internal_has_front()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_);
  }

  // .sensors.ObstacleValue front_left = 2;
  if (this->_internal_has_front_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_left_);
  }

  // .sensors.ObstacleValue front_right = 3;
  if (this->_internal_has_front_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *front_right_);
  }

  // .sensors.ObstacleValue left = 4;
  if (this->_internal_has_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *left_);
  }

  // .sensors.ObstacleValue right = 5;
  if (this->_internal_has_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *right_);
  }

  // .sensors.ObstacleValue back_left = 6;
  if (this->_internal_has_back_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_left_);
  }

  // .sensors.ObstacleValue back_right = 7;
  if (this->_internal_has_back_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_right_);
  }

  // .sensors.ObstacleValue back = 8;
  if (this->_internal_has_back()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *back_);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClosestObstacles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ClosestObstacles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClosestObstacles::GetClassData() const { return &_class_data_; }

void ClosestObstacles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ClosestObstacles *>(to)->MergeFrom(
      static_cast<const ClosestObstacles &>(from));
}


void ClosestObstacles::MergeFrom(const ClosestObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ClosestObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_front()) {
    _internal_mutable_front()->::sensors::ObstacleValue::MergeFrom(from._internal_front());
  }
  if (from._internal_has_front_left()) {
    _internal_mutable_front_left()->::sensors::ObstacleValue::MergeFrom(from._internal_front_left());
  }
  if (from._internal_has_front_right()) {
    _internal_mutable_front_right()->::sensors::ObstacleValue::MergeFrom(from._internal_front_right());
  }
  if (from._internal_has_left()) {
    _internal_mutable_left()->::sensors::ObstacleValue::MergeFrom(from._internal_left());
  }
  if (from._internal_has_right()) {
    _internal_mutable_right()->::sensors::ObstacleValue::MergeFrom(from._internal_right());
  }
  if (from._internal_has_back_left()) {
    _internal_mutable_back_left()->::sensors::ObstacleValue::MergeFrom(from._internal_back_left());
  }
  if (from._internal_has_back_right()) {
    _internal_mutable_back_right()->::sensors::ObstacleValue::MergeFrom(from._internal_back_right());
  }
  if (from._internal_has_back()) {
    _internal_mutable_back()->::sensors::ObstacleValue::MergeFrom(from._internal_back());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClosestObstacles::CopyFrom(const ClosestObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ClosestObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosestObstacles::IsInitialized() const {
  return true;
}

void ClosestObstacles::InternalSwap(ClosestObstacles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClosestObstacles, timestamp_)
      + sizeof(ClosestObstacles::timestamp_)
      - PROTOBUF_FIELD_OFFSET(ClosestObstacles, front_)>(
          reinterpret_cast<char*>(&front_),
          reinterpret_cast<char*>(&other->front_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosestObstacles::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[18]);
}

// ===================================================================

class CameraPoints::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraPoints* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CameraPoints::_Internal::timestamp(const CameraPoints* msg) {
  return *msg->timestamp_;
}
void CameraPoints::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CameraPoints::CameraPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.CameraPoints)
}
CameraPoints::CameraPoints(const CameraPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.CameraPoints)
}

void CameraPoints::SharedCtor() {
timestamp_ = nullptr;
}

CameraPoints::~CameraPoints() {
  // @@protoc_insertion_point(destructor:sensors.CameraPoints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void CameraPoints::ArenaDtor(void* object) {
  CameraPoints* _this = reinterpret_cast< CameraPoints* >(object);
  (void)_this;
}
void CameraPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.CameraPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point3D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.CameraPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point3D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.CameraPoints)
  return target;
}

size_t CameraPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.CameraPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point3D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraPoints::GetClassData() const { return &_class_data_; }

void CameraPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraPoints *>(to)->MergeFrom(
      static_cast<const CameraPoints &>(from));
}


void CameraPoints::MergeFrom(const CameraPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.CameraPoints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraPoints::CopyFrom(const CameraPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.CameraPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPoints::IsInitialized() const {
  return true;
}

void CameraPoints::InternalSwap(CameraPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[19]);
}

// ===================================================================

class Point3D::_Internal {
 public:
};

Point3D::Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.Point3D)
}

void Point3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:sensors.Point3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point3D::ArenaDtor(void* object) {
  Point3D* _this = reinterpret_cast< Point3D* >(object);
  (void)_this;
}
void Point3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Point3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point3D::GetClassData() const { return &_class_data_; }

void Point3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point3D *>(to)->MergeFrom(
      static_cast<const Point3D &>(from));
}


void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, z_)
      + sizeof(Point3D::z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[20]);
}

// ===================================================================

class CameraPoints2D::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraPoints2D* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CameraPoints2D::_Internal::timestamp(const CameraPoints2D* msg) {
  return *msg->timestamp_;
}
void CameraPoints2D::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CameraPoints2D::CameraPoints2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.CameraPoints2D)
}
CameraPoints2D::CameraPoints2D(const CameraPoints2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.CameraPoints2D)
}

void CameraPoints2D::SharedCtor() {
timestamp_ = nullptr;
}

CameraPoints2D::~CameraPoints2D() {
  // @@protoc_insertion_point(destructor:sensors.CameraPoints2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CameraPoints2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void CameraPoints2D::ArenaDtor(void* object) {
  CameraPoints2D* _this = reinterpret_cast< CameraPoints2D* >(object);
  (void)_this;
}
void CameraPoints2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraPoints2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraPoints2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.CameraPoints2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraPoints2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraPoints2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.CameraPoints2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.CameraPoints2D)
  return target;
}

size_t CameraPoints2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.CameraPoints2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CameraPoints2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CameraPoints2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CameraPoints2D::GetClassData() const { return &_class_data_; }

void CameraPoints2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CameraPoints2D *>(to)->MergeFrom(
      static_cast<const CameraPoints2D &>(from));
}


void CameraPoints2D::MergeFrom(const CameraPoints2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.CameraPoints2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CameraPoints2D::CopyFrom(const CameraPoints2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.CameraPoints2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraPoints2D::IsInitialized() const {
  return true;
}

void CameraPoints2D::InternalSwap(CameraPoints2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraPoints2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[21]);
}

// ===================================================================

class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:sensors.Point2D)
}

void Point2D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:sensors.Point2D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point2D::GetClassData() const { return &_class_data_; }

void Point2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point2D *>(to)->MergeFrom(
      static_cast<const Point2D &>(from));
}


void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[22]);
}

// ===================================================================

class LoggingData::_Internal {
 public:
};

LoggingData::LoggingData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.LoggingData)
}
LoggingData::LoggingData(const LoggingData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:sensors.LoggingData)
}

void LoggingData::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&value_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
}

LoggingData::~LoggingData() {
  // @@protoc_insertion_point(destructor:sensors.LoggingData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoggingData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoggingData::ArenaDtor(void* object) {
  LoggingData* _this = reinterpret_cast< LoggingData* >(object);
  (void)_this;
}
void LoggingData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoggingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoggingData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.LoggingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  key_.ClearToEmpty();
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&value_)) + sizeof(timestamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggingData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.LoggingData.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sensors.Point3D points = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.LoggingData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.LoggingData.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // double value = 2;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // int32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_timestamp(), target);
  }

  // repeated .sensors.Point3D points = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.LoggingData)
  return target;
}

size_t LoggingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.LoggingData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point3D points = 4;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // double value = 2;
  if (!(this->_internal_value() <= 0 && this->_internal_value() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoggingData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoggingData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoggingData::GetClassData() const { return &_class_data_; }

void LoggingData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoggingData *>(to)->MergeFrom(
      static_cast<const LoggingData &>(from));
}


void LoggingData::MergeFrom(const LoggingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.LoggingData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!(from._internal_value() <= 0 && from._internal_value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoggingData::CopyFrom(const LoggingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.LoggingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingData::IsInitialized() const {
  return true;
}

void LoggingData::InternalSwap(LoggingData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoggingData, timestamp_)
      + sizeof(LoggingData::timestamp_)
      - PROTOBUF_FIELD_OFFSET(LoggingData, value_)>(
          reinterpret_cast<char*>(&value_),
          reinterpret_cast<char*>(&other->value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[23]);
}

// ===================================================================

class Led::_Internal {
 public:
};

Led::Led(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Led)
}
Led::Led(const Led& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  led_ = from.led_;
  // @@protoc_insertion_point(copy_constructor:sensors.Led)
}

void Led::SharedCtor() {
led_ = 0;
}

Led::~Led() {
  // @@protoc_insertion_point(destructor:sensors.Led)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Led::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Led::ArenaDtor(void* object) {
  Led* _this = reinterpret_cast< Led* >(object);
  (void)_this;
}
void Led::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Led::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Led::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Led)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  led_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Led::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.Led.Leds led = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_led(static_cast<::sensors::Led_Leds>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Led::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Led)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.Led.Leds led = 1;
  if (this->_internal_led() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_led(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Led)
  return target;
}

size_t Led::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Led)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Led.Leds led = 1;
  if (this->_internal_led() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_led());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Led::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Led::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Led::GetClassData() const { return &_class_data_; }

void Led::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Led *>(to)->MergeFrom(
      static_cast<const Led &>(from));
}


void Led::MergeFrom(const Led& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Led)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_led() != 0) {
    _internal_set_led(from._internal_led());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Led::CopyFrom(const Led& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Led)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Led::IsInitialized() const {
  return true;
}

void Led::InternalSwap(Led* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(led_, other->led_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Led::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[24]);
}

// ===================================================================

class HmiState::_Internal {
 public:
};

HmiState::HmiState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.HmiState)
}
HmiState::HmiState(const HmiState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sensors.HmiState)
}

void HmiState::SharedCtor() {
state_ = 0;
}

HmiState::~HmiState() {
  // @@protoc_insertion_point(destructor:sensors.HmiState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HmiState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HmiState::ArenaDtor(void* object) {
  HmiState* _this = reinterpret_cast< HmiState* >(object);
  (void)_this;
}
void HmiState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HmiState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HmiState::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.HmiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HmiState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.HmiState.States state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::sensors::HmiState_States>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HmiState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.HmiState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.HmiState.States state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.HmiState)
  return target;
}

size_t HmiState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.HmiState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.HmiState.States state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HmiState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HmiState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HmiState::GetClassData() const { return &_class_data_; }

void HmiState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HmiState *>(to)->MergeFrom(
      static_cast<const HmiState &>(from));
}


void HmiState::MergeFrom(const HmiState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.HmiState)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HmiState::CopyFrom(const HmiState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.HmiState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiState::IsInitialized() const {
  return true;
}

void HmiState::InternalSwap(HmiState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HmiState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[25]);
}

// ===================================================================

class HmiStreamData::_Internal {
 public:
};

HmiStreamData::HmiStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.HmiStreamData)
}
HmiStreamData::HmiStreamData(const HmiStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_alt_override_, &from.is_alt_override_,
    static_cast<size_t>(reinterpret_cast<char*>(&button_state_) -
    reinterpret_cast<char*>(&is_alt_override_)) + sizeof(button_state_));
  // @@protoc_insertion_point(copy_constructor:sensors.HmiStreamData)
}

void HmiStreamData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&is_alt_override_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&button_state_) -
    reinterpret_cast<char*>(&is_alt_override_)) + sizeof(button_state_));
}

HmiStreamData::~HmiStreamData() {
  // @@protoc_insertion_point(destructor:sensors.HmiStreamData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HmiStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HmiStreamData::ArenaDtor(void* object) {
  HmiStreamData* _this = reinterpret_cast< HmiStreamData* >(object);
  (void)_this;
}
void HmiStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HmiStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HmiStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.HmiStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_alt_override_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&button_state_) -
      reinterpret_cast<char*>(&is_alt_override_)) + sizeof(button_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HmiStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_alt_override = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_alt_override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.HmiStreamData.ButtonState button_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_button_state(static_cast<::sensors::HmiStreamData_ButtonState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HmiStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.HmiStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_alt_override = 1;
  if (this->_internal_is_alt_override() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_alt_override(), target);
  }

  // .sensors.HmiStreamData.ButtonState button_state = 2;
  if (this->_internal_button_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_button_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.HmiStreamData)
  return target;
}

size_t HmiStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.HmiStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_alt_override = 1;
  if (this->_internal_is_alt_override() != 0) {
    total_size += 1 + 1;
  }

  // .sensors.HmiStreamData.ButtonState button_state = 2;
  if (this->_internal_button_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_button_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HmiStreamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HmiStreamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HmiStreamData::GetClassData() const { return &_class_data_; }

void HmiStreamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HmiStreamData *>(to)->MergeFrom(
      static_cast<const HmiStreamData &>(from));
}


void HmiStreamData::MergeFrom(const HmiStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.HmiStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_alt_override() != 0) {
    _internal_set_is_alt_override(from._internal_is_alt_override());
  }
  if (from._internal_button_state() != 0) {
    _internal_set_button_state(from._internal_button_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HmiStreamData::CopyFrom(const HmiStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.HmiStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmiStreamData::IsInitialized() const {
  return true;
}

void HmiStreamData::InternalSwap(HmiStreamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HmiStreamData, button_state_)
      + sizeof(HmiStreamData::button_state_)
      - PROTOBUF_FIELD_OFFSET(HmiStreamData, is_alt_override_)>(
          reinterpret_cast<char*>(&is_alt_override_),
          reinterpret_cast<char*>(&other->is_alt_override_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HmiStreamData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[26]);
}

// ===================================================================

class PressCountStreamData::_Internal {
 public:
};

PressCountStreamData::PressCountStreamData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.PressCountStreamData)
}
PressCountStreamData::PressCountStreamData(const PressCountStreamData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  press_count_ = from.press_count_;
  // @@protoc_insertion_point(copy_constructor:sensors.PressCountStreamData)
}

void PressCountStreamData::SharedCtor() {
press_count_ = 0;
}

PressCountStreamData::~PressCountStreamData() {
  // @@protoc_insertion_point(destructor:sensors.PressCountStreamData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PressCountStreamData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PressCountStreamData::ArenaDtor(void* object) {
  PressCountStreamData* _this = reinterpret_cast< PressCountStreamData* >(object);
  (void)_this;
}
void PressCountStreamData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PressCountStreamData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PressCountStreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.PressCountStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  press_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PressCountStreamData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 press_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          press_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PressCountStreamData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.PressCountStreamData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 press_count = 1;
  if (this->_internal_press_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_press_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.PressCountStreamData)
  return target;
}

size_t PressCountStreamData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.PressCountStreamData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 press_count = 1;
  if (this->_internal_press_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_press_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PressCountStreamData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PressCountStreamData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PressCountStreamData::GetClassData() const { return &_class_data_; }

void PressCountStreamData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PressCountStreamData *>(to)->MergeFrom(
      static_cast<const PressCountStreamData &>(from));
}


void PressCountStreamData::MergeFrom(const PressCountStreamData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.PressCountStreamData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_press_count() != 0) {
    _internal_set_press_count(from._internal_press_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PressCountStreamData::CopyFrom(const PressCountStreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.PressCountStreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PressCountStreamData::IsInitialized() const {
  return true;
}

void PressCountStreamData::InternalSwap(PressCountStreamData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(press_count_, other->press_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PressCountStreamData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[27]);
}

// ===================================================================

class NavigationScaling::_Internal {
 public:
};

NavigationScaling::NavigationScaling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.NavigationScaling)
}
NavigationScaling::NavigationScaling(const NavigationScaling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&front_fb_, &from.front_fb_,
    static_cast<size_t>(reinterpret_cast<char*>(&luci_active_) -
    reinterpret_cast<char*>(&front_fb_)) + sizeof(luci_active_));
  // @@protoc_insertion_point(copy_constructor:sensors.NavigationScaling)
}

void NavigationScaling::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&front_fb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&luci_active_) -
    reinterpret_cast<char*>(&front_fb_)) + sizeof(luci_active_));
}

NavigationScaling::~NavigationScaling() {
  // @@protoc_insertion_point(destructor:sensors.NavigationScaling)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NavigationScaling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NavigationScaling::ArenaDtor(void* object) {
  NavigationScaling* _this = reinterpret_cast< NavigationScaling* >(object);
  (void)_this;
}
void NavigationScaling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationScaling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NavigationScaling::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.NavigationScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&front_fb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&luci_active_) -
      reinterpret_cast<char*>(&front_fb_)) + sizeof(luci_active_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationScaling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float front_fb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          front_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_rl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          front_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_fb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          front_right_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_right_rl = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          front_right_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_fb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          front_left_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float front_left_rl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          front_left_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right_fb = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          right_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right_rl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          right_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float left_fb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          left_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float left_rl = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          left_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float back_right_fb = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          back_right_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float back_right_rl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          back_right_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float back_left_fb = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          back_left_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float back_left_rl = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          back_left_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float back_fb = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          back_fb_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float back_rl = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          back_rl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_js_scale_increase = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_js_scale_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_js_scale_decrease = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          max_js_scale_decrease_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool luci_active = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          luci_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationScaling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.NavigationScaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float front_fb = 1;
  if (!(this->_internal_front_fb() <= 0 && this->_internal_front_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_front_fb(), target);
  }

  // float front_rl = 2;
  if (!(this->_internal_front_rl() <= 0 && this->_internal_front_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_front_rl(), target);
  }

  // float front_right_fb = 3;
  if (!(this->_internal_front_right_fb() <= 0 && this->_internal_front_right_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_front_right_fb(), target);
  }

  // float front_right_rl = 4;
  if (!(this->_internal_front_right_rl() <= 0 && this->_internal_front_right_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_front_right_rl(), target);
  }

  // float front_left_fb = 5;
  if (!(this->_internal_front_left_fb() <= 0 && this->_internal_front_left_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_front_left_fb(), target);
  }

  // float front_left_rl = 6;
  if (!(this->_internal_front_left_rl() <= 0 && this->_internal_front_left_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_front_left_rl(), target);
  }

  // float right_fb = 7;
  if (!(this->_internal_right_fb() <= 0 && this->_internal_right_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_right_fb(), target);
  }

  // float right_rl = 8;
  if (!(this->_internal_right_rl() <= 0 && this->_internal_right_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_right_rl(), target);
  }

  // float left_fb = 9;
  if (!(this->_internal_left_fb() <= 0 && this->_internal_left_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_left_fb(), target);
  }

  // float left_rl = 10;
  if (!(this->_internal_left_rl() <= 0 && this->_internal_left_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_left_rl(), target);
  }

  // float back_right_fb = 11;
  if (!(this->_internal_back_right_fb() <= 0 && this->_internal_back_right_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_back_right_fb(), target);
  }

  // float back_right_rl = 12;
  if (!(this->_internal_back_right_rl() <= 0 && this->_internal_back_right_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_back_right_rl(), target);
  }

  // float back_left_fb = 13;
  if (!(this->_internal_back_left_fb() <= 0 && this->_internal_back_left_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_back_left_fb(), target);
  }

  // float back_left_rl = 14;
  if (!(this->_internal_back_left_rl() <= 0 && this->_internal_back_left_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_back_left_rl(), target);
  }

  // float back_fb = 15;
  if (!(this->_internal_back_fb() <= 0 && this->_internal_back_fb() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_back_fb(), target);
  }

  // float back_rl = 16;
  if (!(this->_internal_back_rl() <= 0 && this->_internal_back_rl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_back_rl(), target);
  }

  // uint32 max_js_scale_increase = 17;
  if (this->_internal_max_js_scale_increase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_js_scale_increase(), target);
  }

  // uint32 max_js_scale_decrease = 18;
  if (this->_internal_max_js_scale_decrease() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_max_js_scale_decrease(), target);
  }

  // bool luci_active = 19;
  if (this->_internal_luci_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_luci_active(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.NavigationScaling)
  return target;
}

size_t NavigationScaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.NavigationScaling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float front_fb = 1;
  if (!(this->_internal_front_fb() <= 0 && this->_internal_front_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_rl = 2;
  if (!(this->_internal_front_rl() <= 0 && this->_internal_front_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_right_fb = 3;
  if (!(this->_internal_front_right_fb() <= 0 && this->_internal_front_right_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_right_rl = 4;
  if (!(this->_internal_front_right_rl() <= 0 && this->_internal_front_right_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_left_fb = 5;
  if (!(this->_internal_front_left_fb() <= 0 && this->_internal_front_left_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float front_left_rl = 6;
  if (!(this->_internal_front_left_rl() <= 0 && this->_internal_front_left_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_fb = 7;
  if (!(this->_internal_right_fb() <= 0 && this->_internal_right_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_rl = 8;
  if (!(this->_internal_right_rl() <= 0 && this->_internal_right_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_fb = 9;
  if (!(this->_internal_left_fb() <= 0 && this->_internal_left_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float left_rl = 10;
  if (!(this->_internal_left_rl() <= 0 && this->_internal_left_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_right_fb = 11;
  if (!(this->_internal_back_right_fb() <= 0 && this->_internal_back_right_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_right_rl = 12;
  if (!(this->_internal_back_right_rl() <= 0 && this->_internal_back_right_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_left_fb = 13;
  if (!(this->_internal_back_left_fb() <= 0 && this->_internal_back_left_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_left_rl = 14;
  if (!(this->_internal_back_left_rl() <= 0 && this->_internal_back_left_rl() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_fb = 15;
  if (!(this->_internal_back_fb() <= 0 && this->_internal_back_fb() >= 0)) {
    total_size += 1 + 4;
  }

  // float back_rl = 16;
  if (!(this->_internal_back_rl() <= 0 && this->_internal_back_rl() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 max_js_scale_increase = 17;
  if (this->_internal_max_js_scale_increase() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_js_scale_increase());
  }

  // uint32 max_js_scale_decrease = 18;
  if (this->_internal_max_js_scale_decrease() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_js_scale_decrease());
  }

  // bool luci_active = 19;
  if (this->_internal_luci_active() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NavigationScaling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NavigationScaling::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NavigationScaling::GetClassData() const { return &_class_data_; }

void NavigationScaling::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NavigationScaling *>(to)->MergeFrom(
      static_cast<const NavigationScaling &>(from));
}


void NavigationScaling::MergeFrom(const NavigationScaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.NavigationScaling)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_front_fb() <= 0 && from._internal_front_fb() >= 0)) {
    _internal_set_front_fb(from._internal_front_fb());
  }
  if (!(from._internal_front_rl() <= 0 && from._internal_front_rl() >= 0)) {
    _internal_set_front_rl(from._internal_front_rl());
  }
  if (!(from._internal_front_right_fb() <= 0 && from._internal_front_right_fb() >= 0)) {
    _internal_set_front_right_fb(from._internal_front_right_fb());
  }
  if (!(from._internal_front_right_rl() <= 0 && from._internal_front_right_rl() >= 0)) {
    _internal_set_front_right_rl(from._internal_front_right_rl());
  }
  if (!(from._internal_front_left_fb() <= 0 && from._internal_front_left_fb() >= 0)) {
    _internal_set_front_left_fb(from._internal_front_left_fb());
  }
  if (!(from._internal_front_left_rl() <= 0 && from._internal_front_left_rl() >= 0)) {
    _internal_set_front_left_rl(from._internal_front_left_rl());
  }
  if (!(from._internal_right_fb() <= 0 && from._internal_right_fb() >= 0)) {
    _internal_set_right_fb(from._internal_right_fb());
  }
  if (!(from._internal_right_rl() <= 0 && from._internal_right_rl() >= 0)) {
    _internal_set_right_rl(from._internal_right_rl());
  }
  if (!(from._internal_left_fb() <= 0 && from._internal_left_fb() >= 0)) {
    _internal_set_left_fb(from._internal_left_fb());
  }
  if (!(from._internal_left_rl() <= 0 && from._internal_left_rl() >= 0)) {
    _internal_set_left_rl(from._internal_left_rl());
  }
  if (!(from._internal_back_right_fb() <= 0 && from._internal_back_right_fb() >= 0)) {
    _internal_set_back_right_fb(from._internal_back_right_fb());
  }
  if (!(from._internal_back_right_rl() <= 0 && from._internal_back_right_rl() >= 0)) {
    _internal_set_back_right_rl(from._internal_back_right_rl());
  }
  if (!(from._internal_back_left_fb() <= 0 && from._internal_back_left_fb() >= 0)) {
    _internal_set_back_left_fb(from._internal_back_left_fb());
  }
  if (!(from._internal_back_left_rl() <= 0 && from._internal_back_left_rl() >= 0)) {
    _internal_set_back_left_rl(from._internal_back_left_rl());
  }
  if (!(from._internal_back_fb() <= 0 && from._internal_back_fb() >= 0)) {
    _internal_set_back_fb(from._internal_back_fb());
  }
  if (!(from._internal_back_rl() <= 0 && from._internal_back_rl() >= 0)) {
    _internal_set_back_rl(from._internal_back_rl());
  }
  if (from._internal_max_js_scale_increase() != 0) {
    _internal_set_max_js_scale_increase(from._internal_max_js_scale_increase());
  }
  if (from._internal_max_js_scale_decrease() != 0) {
    _internal_set_max_js_scale_decrease(from._internal_max_js_scale_decrease());
  }
  if (from._internal_luci_active() != 0) {
    _internal_set_luci_active(from._internal_luci_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NavigationScaling::CopyFrom(const NavigationScaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.NavigationScaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationScaling::IsInitialized() const {
  return true;
}

void NavigationScaling::InternalSwap(NavigationScaling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationScaling, luci_active_)
      + sizeof(NavigationScaling::luci_active_)
      - PROTOBUF_FIELD_OFFSET(NavigationScaling, front_fb_)>(
          reinterpret_cast<char*>(&front_fb_),
          reinterpret_cast<char*>(&other->front_fb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationScaling::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[28]);
}

// ===================================================================

class UltrasonicCtrl::_Internal {
 public:
};

UltrasonicCtrl::UltrasonicCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicCtrl)
}
UltrasonicCtrl::UltrasonicCtrl(const UltrasonicCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_, &from.board_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicCtrl)
}

void UltrasonicCtrl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
}

UltrasonicCtrl::~UltrasonicCtrl() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicCtrl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UltrasonicCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicCtrl::ArenaDtor(void* object) {
  UltrasonicCtrl* _this = reinterpret_cast< UltrasonicCtrl* >(object);
  (void)_this;
}
void UltrasonicCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&board_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&board_)) + sizeof(address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.UltrasonicCtrl.Board board = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board(static_cast<::sensors::UltrasonicCtrl_Board>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 spi_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          spi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.UltrasonicCtrl.Board board = 1;
  if (this->_internal_board() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_board(), target);
  }

  // int32 spi_id = 2;
  if (this->_internal_spi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_spi_id(), target);
  }

  // int32 address = 3;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicCtrl)
  return target;
}

size_t UltrasonicCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.UltrasonicCtrl.Board board = 1;
  if (this->_internal_board() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board());
  }

  // int32 spi_id = 2;
  if (this->_internal_spi_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_spi_id());
  }

  // int32 address = 3;
  if (this->_internal_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicCtrl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UltrasonicCtrl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicCtrl::GetClassData() const { return &_class_data_; }

void UltrasonicCtrl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UltrasonicCtrl *>(to)->MergeFrom(
      static_cast<const UltrasonicCtrl &>(from));
}


void UltrasonicCtrl::MergeFrom(const UltrasonicCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_board() != 0) {
    _internal_set_board(from._internal_board());
  }
  if (from._internal_spi_id() != 0) {
    _internal_set_spi_id(from._internal_spi_id());
  }
  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicCtrl::CopyFrom(const UltrasonicCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicCtrl::IsInitialized() const {
  return true;
}

void UltrasonicCtrl::InternalSwap(UltrasonicCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicCtrl, address_)
      + sizeof(UltrasonicCtrl::address_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicCtrl, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[29]);
}

// ===================================================================

class UltrasonicDistance::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const UltrasonicDistance* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
UltrasonicDistance::_Internal::timestamp(const UltrasonicDistance* msg) {
  return *msg->timestamp_;
}
void UltrasonicDistance::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
UltrasonicDistance::UltrasonicDistance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  arc_points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicDistance)
}
UltrasonicDistance::UltrasonicDistance(const UltrasonicDistance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      arc_points_(from.arc_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&distance_, &from.distance_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&distance_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicDistance)
}

void UltrasonicDistance::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(address_));
}

UltrasonicDistance::~UltrasonicDistance() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicDistance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UltrasonicDistance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void UltrasonicDistance::ArenaDtor(void* object) {
  UltrasonicDistance* _this = reinterpret_cast< UltrasonicDistance* >(object);
  (void)_this;
}
void UltrasonicDistance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicDistance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arc_points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&distance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&distance_)) + sizeof(address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicDistance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double distance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .sensors.UltrasonicDistance.Board board = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board(static_cast<::sensors::UltrasonicDistance_Board>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 spi_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sensors.Point3D arc_points = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arc_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDistance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicDistance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance = 1;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance(), target);
  }

  // .sensors.UltrasonicDistance.Board board = 2;
  if (this->_internal_board() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_board(), target);
  }

  // int32 spi_id = 3;
  if (this->_internal_spi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spi_id(), target);
  }

  // int32 address = 4;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_address(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // repeated .sensors.Point3D arc_points = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arc_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_arc_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicDistance)
  return target;
}

size_t UltrasonicDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicDistance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.Point3D arc_points = 6;
  total_size += 1UL * this->_internal_arc_points_size();
  for (const auto& msg : this->arc_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double distance = 1;
  if (!(this->_internal_distance() <= 0 && this->_internal_distance() >= 0)) {
    total_size += 1 + 8;
  }

  // .sensors.UltrasonicDistance.Board board = 2;
  if (this->_internal_board() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board());
  }

  // int32 spi_id = 3;
  if (this->_internal_spi_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_spi_id());
  }

  // int32 address = 4;
  if (this->_internal_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicDistance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UltrasonicDistance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicDistance::GetClassData() const { return &_class_data_; }

void UltrasonicDistance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UltrasonicDistance *>(to)->MergeFrom(
      static_cast<const UltrasonicDistance &>(from));
}


void UltrasonicDistance::MergeFrom(const UltrasonicDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicDistance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arc_points_.MergeFrom(from.arc_points_);
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from._internal_distance() <= 0 && from._internal_distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from._internal_board() != 0) {
    _internal_set_board(from._internal_board());
  }
  if (from._internal_spi_id() != 0) {
    _internal_set_spi_id(from._internal_spi_id());
  }
  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicDistance::CopyFrom(const UltrasonicDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDistance::IsInitialized() const {
  return true;
}

void UltrasonicDistance::InternalSwap(UltrasonicDistance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  arc_points_.InternalSwap(&other->arc_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicDistance, address_)
      + sizeof(UltrasonicDistance::address_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicDistance, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDistance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[30]);
}

// ===================================================================

class UltrasonicDistances::_Internal {
 public:
};

UltrasonicDistances::UltrasonicDistances(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  distances_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicDistances)
}
UltrasonicDistances::UltrasonicDistances(const UltrasonicDistances& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicDistances)
}

void UltrasonicDistances::SharedCtor() {
}

UltrasonicDistances::~UltrasonicDistances() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicDistances)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UltrasonicDistances::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicDistances::ArenaDtor(void* object) {
  UltrasonicDistances* _this = reinterpret_cast< UltrasonicDistances* >(object);
  (void)_this;
}
void UltrasonicDistances::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicDistances::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicDistances::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicDistances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distances_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicDistances::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.UltrasonicDistance distances = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicDistances::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicDistances)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.UltrasonicDistance distances = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_distances(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicDistances)
  return target;
}

size_t UltrasonicDistances::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicDistances)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.UltrasonicDistance distances = 1;
  total_size += 1UL * this->_internal_distances_size();
  for (const auto& msg : this->distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicDistances::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UltrasonicDistances::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicDistances::GetClassData() const { return &_class_data_; }

void UltrasonicDistances::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UltrasonicDistances *>(to)->MergeFrom(
      static_cast<const UltrasonicDistances &>(from));
}


void UltrasonicDistances::MergeFrom(const UltrasonicDistances& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicDistances)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  distances_.MergeFrom(from.distances_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicDistances::CopyFrom(const UltrasonicDistances& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicDistances)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicDistances::IsInitialized() const {
  return true;
}

void UltrasonicDistances::InternalSwap(UltrasonicDistances* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  distances_.InternalSwap(&other->distances_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicDistances::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[31]);
}

// ===================================================================

class UltrasonicCurve::_Internal {
 public:
};

UltrasonicCurve::UltrasonicCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  curve_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.UltrasonicCurve)
}
UltrasonicCurve::UltrasonicCurve(const UltrasonicCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      curve_(from.curve_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&board_, &from.board_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
  // @@protoc_insertion_point(copy_constructor:sensors.UltrasonicCurve)
}

void UltrasonicCurve::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&board_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&address_) -
    reinterpret_cast<char*>(&board_)) + sizeof(address_));
}

UltrasonicCurve::~UltrasonicCurve() {
  // @@protoc_insertion_point(destructor:sensors.UltrasonicCurve)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UltrasonicCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UltrasonicCurve::ArenaDtor(void* object) {
  UltrasonicCurve* _this = reinterpret_cast< UltrasonicCurve* >(object);
  (void)_this;
}
void UltrasonicCurve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UltrasonicCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UltrasonicCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.UltrasonicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_.Clear();
  ::memset(&board_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_) -
      reinterpret_cast<char*>(&board_)) + sizeof(address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UltrasonicCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_curve(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_curve(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.UltrasonicCurve.Board board = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_board(static_cast<::sensors::UltrasonicCurve_Board>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 spi_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          spi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UltrasonicCurve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.UltrasonicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 curve = 1;
  {
    int byte_size = _curve_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_curve(), byte_size, target);
    }
  }

  // .sensors.UltrasonicCurve.Board board = 2;
  if (this->_internal_board() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_board(), target);
  }

  // int32 spi_id = 3;
  if (this->_internal_spi_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_spi_id(), target);
  }

  // int32 address = 4;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.UltrasonicCurve)
  return target;
}

size_t UltrasonicCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.UltrasonicCurve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 curve = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->curve_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _curve_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .sensors.UltrasonicCurve.Board board = 2;
  if (this->_internal_board() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_board());
  }

  // int32 spi_id = 3;
  if (this->_internal_spi_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_spi_id());
  }

  // int32 address = 4;
  if (this->_internal_address() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UltrasonicCurve::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UltrasonicCurve::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UltrasonicCurve::GetClassData() const { return &_class_data_; }

void UltrasonicCurve::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UltrasonicCurve *>(to)->MergeFrom(
      static_cast<const UltrasonicCurve &>(from));
}


void UltrasonicCurve::MergeFrom(const UltrasonicCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.UltrasonicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_.MergeFrom(from.curve_);
  if (from._internal_board() != 0) {
    _internal_set_board(from._internal_board());
  }
  if (from._internal_spi_id() != 0) {
    _internal_set_spi_id(from._internal_spi_id());
  }
  if (from._internal_address() != 0) {
    _internal_set_address(from._internal_address());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UltrasonicCurve::CopyFrom(const UltrasonicCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.UltrasonicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UltrasonicCurve::IsInitialized() const {
  return true;
}

void UltrasonicCurve::InternalSwap(UltrasonicCurve* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  curve_.InternalSwap(&other->curve_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UltrasonicCurve, address_)
      + sizeof(UltrasonicCurve::address_)
      - PROTOBUF_FIELD_OFFSET(UltrasonicCurve, board_)>(
          reinterpret_cast<char*>(&board_),
          reinterpret_cast<char*>(&other->board_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UltrasonicCurve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[32]);
}

// ===================================================================

class RadarFilter::_Internal {
 public:
};

RadarFilter::RadarFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RadarFilter)
}
RadarFilter::RadarFilter(const RadarFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_ = from.filter_;
  // @@protoc_insertion_point(copy_constructor:sensors.RadarFilter)
}

void RadarFilter::SharedCtor() {
filter_ = 0;
}

RadarFilter::~RadarFilter() {
  // @@protoc_insertion_point(destructor:sensors.RadarFilter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarFilter::ArenaDtor(void* object) {
  RadarFilter* _this = reinterpret_cast< RadarFilter* >(object);
  (void)_this;
}
void RadarFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.RadarFilter.Filter filter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filter(static_cast<::sensors::RadarFilter_Filter>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.RadarFilter.Filter filter = 1;
  if (this->_internal_filter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_filter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarFilter)
  return target;
}

size_t RadarFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.RadarFilter.Filter filter = 1;
  if (this->_internal_filter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarFilter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarFilter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarFilter::GetClassData() const { return &_class_data_; }

void RadarFilter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarFilter *>(to)->MergeFrom(
      static_cast<const RadarFilter &>(from));
}


void RadarFilter::MergeFrom(const RadarFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarFilter)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_filter() != 0) {
    _internal_set_filter(from._internal_filter());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarFilter::CopyFrom(const RadarFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarFilter::IsInitialized() const {
  return true;
}

void RadarFilter::InternalSwap(RadarFilter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(filter_, other->filter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarFilter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[33]);
}

// ===================================================================

class RadarCtrl::_Internal {
 public:
};

RadarCtrl::RadarCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RadarCtrl)
}
RadarCtrl::RadarCtrl(const RadarCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radar_ = from.radar_;
  // @@protoc_insertion_point(copy_constructor:sensors.RadarCtrl)
}

void RadarCtrl::SharedCtor() {
radar_ = 0;
}

RadarCtrl::~RadarCtrl() {
  // @@protoc_insertion_point(destructor:sensors.RadarCtrl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarCtrl::ArenaDtor(void* object) {
  RadarCtrl* _this = reinterpret_cast< RadarCtrl* >(object);
  (void)_this;
}
void RadarCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radar_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.RadarCtrl.Radar radar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_radar(static_cast<::sensors::RadarCtrl_Radar>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.RadarCtrl.Radar radar = 1;
  if (this->_internal_radar() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_radar(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarCtrl)
  return target;
}

size_t RadarCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.RadarCtrl.Radar radar = 1;
  if (this->_internal_radar() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_radar());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarCtrl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarCtrl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarCtrl::GetClassData() const { return &_class_data_; }

void RadarCtrl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarCtrl *>(to)->MergeFrom(
      static_cast<const RadarCtrl &>(from));
}


void RadarCtrl::MergeFrom(const RadarCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_radar() != 0) {
    _internal_set_radar(from._internal_radar());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarCtrl::CopyFrom(const RadarCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarCtrl::IsInitialized() const {
  return true;
}

void RadarCtrl::InternalSwap(RadarCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(radar_, other->radar_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[34]);
}

// ===================================================================

class RadarPoint::_Internal {
 public:
};

RadarPoint::RadarPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RadarPoint)
}
RadarPoint::RadarPoint(const RadarPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&cross_section_) -
    reinterpret_cast<char*>(&x_)) + sizeof(cross_section_));
  // @@protoc_insertion_point(copy_constructor:sensors.RadarPoint)
}

void RadarPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cross_section_) -
    reinterpret_cast<char*>(&x_)) + sizeof(cross_section_));
}

RadarPoint::~RadarPoint() {
  // @@protoc_insertion_point(destructor:sensors.RadarPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RadarPoint::ArenaDtor(void* object) {
  RadarPoint* _this = reinterpret_cast< RadarPoint* >(object);
  (void)_this;
}
void RadarPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cross_section_) -
      reinterpret_cast<char*>(&x_)) + sizeof(cross_section_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double doppler = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          doppler_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double cross_section = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          cross_section_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double doppler = 4;
  if (!(this->_internal_doppler() <= 0 && this->_internal_doppler() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_doppler(), target);
  }

  // double cross_section = 5;
  if (!(this->_internal_cross_section() <= 0 && this->_internal_cross_section() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_cross_section(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarPoint)
  return target;
}

size_t RadarPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double doppler = 4;
  if (!(this->_internal_doppler() <= 0 && this->_internal_doppler() >= 0)) {
    total_size += 1 + 8;
  }

  // double cross_section = 5;
  if (!(this->_internal_cross_section() <= 0 && this->_internal_cross_section() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarPoint::GetClassData() const { return &_class_data_; }

void RadarPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarPoint *>(to)->MergeFrom(
      static_cast<const RadarPoint &>(from));
}


void RadarPoint::MergeFrom(const RadarPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from._internal_doppler() <= 0 && from._internal_doppler() >= 0)) {
    _internal_set_doppler(from._internal_doppler());
  }
  if (!(from._internal_cross_section() <= 0 && from._internal_cross_section() >= 0)) {
    _internal_set_cross_section(from._internal_cross_section());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarPoint::CopyFrom(const RadarPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarPoint::IsInitialized() const {
  return true;
}

void RadarPoint::InternalSwap(RadarPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarPoint, cross_section_)
      + sizeof(RadarPoint::cross_section_)
      - PROTOBUF_FIELD_OFFSET(RadarPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[35]);
}

// ===================================================================

class RadarPoints::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RadarPoints* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RadarPoints::_Internal::timestamp(const RadarPoints* msg) {
  return *msg->timestamp_;
}
void RadarPoints::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
RadarPoints::RadarPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RadarPoints)
}
RadarPoints::RadarPoints(const RadarPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:sensors.RadarPoints)
}

void RadarPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
}

RadarPoints::~RadarPoints() {
  // @@protoc_insertion_point(destructor:sensors.RadarPoints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RadarPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void RadarPoints::ArenaDtor(void* object) {
  RadarPoints* _this = reinterpret_cast< RadarPoints* >(object);
  (void)_this;
}
void RadarPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RadarPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RadarPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  source_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sensors.RadarPoint points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .sensors.RadarPoints.Radar source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::sensors::RadarPoints_Radar>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RadarPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sensors.RadarPoint points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  // .sensors.RadarPoints.Radar source = 2;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_source(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RadarPoints)
  return target;
}

size_t RadarPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RadarPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sensors.RadarPoint points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .sensors.RadarPoints.Radar source = 2;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RadarPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RadarPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RadarPoints::GetClassData() const { return &_class_data_; }

void RadarPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RadarPoints *>(to)->MergeFrom(
      static_cast<const RadarPoints &>(from));
}


void RadarPoints::MergeFrom(const RadarPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RadarPoints)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_source() != 0) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RadarPoints::CopyFrom(const RadarPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RadarPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarPoints::IsInitialized() const {
  return true;
}

void RadarPoints::InternalSwap(RadarPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarPoints, source_)
      + sizeof(RadarPoints::source_)
      - PROTOBUF_FIELD_OFFSET(RadarPoints, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarPoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[36]);
}

// ===================================================================

class ChairSpeed::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ChairSpeed* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ChairSpeed::_Internal::timestamp(const ChairSpeed* msg) {
  return *msg->timestamp_;
}
void ChairSpeed::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ChairSpeed::ChairSpeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ChairSpeed)
}
ChairSpeed::ChairSpeed(const ChairSpeed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  speed_m_p_s_ = from.speed_m_p_s_;
  // @@protoc_insertion_point(copy_constructor:sensors.ChairSpeed)
}

void ChairSpeed::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_m_p_s_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(speed_m_p_s_));
}

ChairSpeed::~ChairSpeed() {
  // @@protoc_insertion_point(destructor:sensors.ChairSpeed)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChairSpeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void ChairSpeed::ArenaDtor(void* object) {
  ChairSpeed* _this = reinterpret_cast< ChairSpeed* >(object);
  (void)_this;
}
void ChairSpeed::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChairSpeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChairSpeed::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ChairSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  speed_m_p_s_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChairSpeed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double speed_m_p_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          speed_m_p_s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChairSpeed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ChairSpeed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double speed_m_p_s = 1;
  if (!(this->_internal_speed_m_p_s() <= 0 && this->_internal_speed_m_p_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_speed_m_p_s(), target);
  }

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ChairSpeed)
  return target;
}

size_t ChairSpeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ChairSpeed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 2;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double speed_m_p_s = 1;
  if (!(this->_internal_speed_m_p_s() <= 0 && this->_internal_speed_m_p_s() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChairSpeed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChairSpeed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChairSpeed::GetClassData() const { return &_class_data_; }

void ChairSpeed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChairSpeed *>(to)->MergeFrom(
      static_cast<const ChairSpeed &>(from));
}


void ChairSpeed::MergeFrom(const ChairSpeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ChairSpeed)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from._internal_speed_m_p_s() <= 0 && from._internal_speed_m_p_s() >= 0)) {
    _internal_set_speed_m_p_s(from._internal_speed_m_p_s());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChairSpeed::CopyFrom(const ChairSpeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ChairSpeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairSpeed::IsInitialized() const {
  return true;
}

void ChairSpeed::InternalSwap(ChairSpeed* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChairSpeed, speed_m_p_s_)
      + sizeof(ChairSpeed::speed_m_p_s_)
      - PROTOBUF_FIELD_OFFSET(ChairSpeed, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChairSpeed::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[37]);
}

// ===================================================================

class ImuCtrl::_Internal {
 public:
};

ImuCtrl::ImuCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ImuCtrl)
}
ImuCtrl::ImuCtrl(const ImuCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  imu_ = from.imu_;
  // @@protoc_insertion_point(copy_constructor:sensors.ImuCtrl)
}

void ImuCtrl::SharedCtor() {
imu_ = 0;
}

ImuCtrl::~ImuCtrl() {
  // @@protoc_insertion_point(destructor:sensors.ImuCtrl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImuCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImuCtrl::ArenaDtor(void* object) {
  ImuCtrl* _this = reinterpret_cast< ImuCtrl* >(object);
  (void)_this;
}
void ImuCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImuCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ImuCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  imu_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.Imu imu = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_imu(static_cast<::sensors::Imu>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ImuCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.Imu imu = 1;
  if (this->_internal_imu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_imu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ImuCtrl)
  return target;
}

size_t ImuCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ImuCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Imu imu = 1;
  if (this->_internal_imu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_imu());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImuCtrl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImuCtrl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImuCtrl::GetClassData() const { return &_class_data_; }

void ImuCtrl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImuCtrl *>(to)->MergeFrom(
      static_cast<const ImuCtrl &>(from));
}


void ImuCtrl::MergeFrom(const ImuCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ImuCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_imu() != 0) {
    _internal_set_imu(from._internal_imu());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImuCtrl::CopyFrom(const ImuCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ImuCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuCtrl::IsInitialized() const {
  return true;
}

void ImuCtrl::InternalSwap(ImuCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(imu_, other->imu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[38]);
}

// ===================================================================

class ImuData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ImuData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ImuData::_Internal::timestamp(const ImuData* msg) {
  return *msg->timestamp_;
}
void ImuData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ImuData::ImuData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ImuData)
}
ImuData::ImuData(const ImuData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&quaternion_x_, &from.quaternion_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&quaternion_x_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:sensors.ImuData)
}

void ImuData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(source_));
}

ImuData::~ImuData() {
  // @@protoc_insertion_point(destructor:sensors.ImuData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ImuData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void ImuData::ArenaDtor(void* object) {
  ImuData* _this = reinterpret_cast< ImuData* >(object);
  (void)_this;
}
void ImuData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ImuData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ImuData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&quaternion_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&quaternion_x_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImuData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double quaternion_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          quaternion_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double quaternion_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          quaternion_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double quaternion_z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          quaternion_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double quaternion_w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          quaternion_w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          acceleration_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          acceleration_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double acceleration_z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          acceleration_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gyro_x = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          gyro_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gyro_y = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          gyro_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gyro_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          gyro_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double euler_x = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          euler_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double euler_y = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          euler_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double euler_z = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          euler_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double accelerometer_x = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          accelerometer_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double accelerometer_y = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          accelerometer_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double accelerometer_z = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          accelerometer_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double magnetometer_x = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          magnetometer_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double magnetometer_y = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          magnetometer_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double magnetometer_z = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          magnetometer_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gravity_x = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          gravity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gravity_y = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          gravity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double gravity_z = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          gravity_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_system = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_system(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_gyroscope = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_gyroscope(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_accelerometer = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_accelerometer(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .sensors.ImuData.CalibrationStatus cal_magnetometer = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cal_magnetometer(static_cast<::sensors::ImuData_CalibrationStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.Imu source = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::sensors::Imu>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ImuData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ImuData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double quaternion_x = 1;
  if (!(this->_internal_quaternion_x() <= 0 && this->_internal_quaternion_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_quaternion_x(), target);
  }

  // double quaternion_y = 2;
  if (!(this->_internal_quaternion_y() <= 0 && this->_internal_quaternion_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_quaternion_y(), target);
  }

  // double quaternion_z = 3;
  if (!(this->_internal_quaternion_z() <= 0 && this->_internal_quaternion_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_quaternion_z(), target);
  }

  // double quaternion_w = 4;
  if (!(this->_internal_quaternion_w() <= 0 && this->_internal_quaternion_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_quaternion_w(), target);
  }

  // double acceleration_x = 5;
  if (!(this->_internal_acceleration_x() <= 0 && this->_internal_acceleration_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_acceleration_x(), target);
  }

  // double acceleration_y = 6;
  if (!(this->_internal_acceleration_y() <= 0 && this->_internal_acceleration_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_acceleration_y(), target);
  }

  // double acceleration_z = 7;
  if (!(this->_internal_acceleration_z() <= 0 && this->_internal_acceleration_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_acceleration_z(), target);
  }

  // double gyro_x = 8;
  if (!(this->_internal_gyro_x() <= 0 && this->_internal_gyro_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_gyro_x(), target);
  }

  // double gyro_y = 9;
  if (!(this->_internal_gyro_y() <= 0 && this->_internal_gyro_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_gyro_y(), target);
  }

  // double gyro_z = 10;
  if (!(this->_internal_gyro_z() <= 0 && this->_internal_gyro_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_gyro_z(), target);
  }

  // double euler_x = 11;
  if (!(this->_internal_euler_x() <= 0 && this->_internal_euler_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_euler_x(), target);
  }

  // double euler_y = 12;
  if (!(this->_internal_euler_y() <= 0 && this->_internal_euler_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_euler_y(), target);
  }

  // double euler_z = 13;
  if (!(this->_internal_euler_z() <= 0 && this->_internal_euler_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_euler_z(), target);
  }

  // double accelerometer_x = 14;
  if (!(this->_internal_accelerometer_x() <= 0 && this->_internal_accelerometer_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_accelerometer_x(), target);
  }

  // double accelerometer_y = 15;
  if (!(this->_internal_accelerometer_y() <= 0 && this->_internal_accelerometer_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_accelerometer_y(), target);
  }

  // double accelerometer_z = 16;
  if (!(this->_internal_accelerometer_z() <= 0 && this->_internal_accelerometer_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_accelerometer_z(), target);
  }

  // double magnetometer_x = 17;
  if (!(this->_internal_magnetometer_x() <= 0 && this->_internal_magnetometer_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_magnetometer_x(), target);
  }

  // double magnetometer_y = 18;
  if (!(this->_internal_magnetometer_y() <= 0 && this->_internal_magnetometer_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_magnetometer_y(), target);
  }

  // double magnetometer_z = 19;
  if (!(this->_internal_magnetometer_z() <= 0 && this->_internal_magnetometer_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_magnetometer_z(), target);
  }

  // double gravity_x = 20;
  if (!(this->_internal_gravity_x() <= 0 && this->_internal_gravity_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_gravity_x(), target);
  }

  // double gravity_y = 21;
  if (!(this->_internal_gravity_y() <= 0 && this->_internal_gravity_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_gravity_y(), target);
  }

  // double gravity_z = 22;
  if (!(this->_internal_gravity_z() <= 0 && this->_internal_gravity_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_gravity_z(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_system = 23;
  if (this->_internal_cal_system() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->_internal_cal_system(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_gyroscope = 24;
  if (this->_internal_cal_gyroscope() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_cal_gyroscope(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_accelerometer = 25;
  if (this->_internal_cal_accelerometer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      25, this->_internal_cal_accelerometer(), target);
  }

  // .sensors.ImuData.CalibrationStatus cal_magnetometer = 26;
  if (this->_internal_cal_magnetometer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_cal_magnetometer(), target);
  }

  // .google.protobuf.Timestamp timestamp = 27;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::timestamp(this), target, stream);
  }

  // .sensors.Imu source = 28;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      28, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ImuData)
  return target;
}

size_t ImuData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ImuData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 27;
  if (this->_internal_has_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // double quaternion_x = 1;
  if (!(this->_internal_quaternion_x() <= 0 && this->_internal_quaternion_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double quaternion_y = 2;
  if (!(this->_internal_quaternion_y() <= 0 && this->_internal_quaternion_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double quaternion_z = 3;
  if (!(this->_internal_quaternion_z() <= 0 && this->_internal_quaternion_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double quaternion_w = 4;
  if (!(this->_internal_quaternion_w() <= 0 && this->_internal_quaternion_w() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_x = 5;
  if (!(this->_internal_acceleration_x() <= 0 && this->_internal_acceleration_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_y = 6;
  if (!(this->_internal_acceleration_y() <= 0 && this->_internal_acceleration_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double acceleration_z = 7;
  if (!(this->_internal_acceleration_z() <= 0 && this->_internal_acceleration_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_x = 8;
  if (!(this->_internal_gyro_x() <= 0 && this->_internal_gyro_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_y = 9;
  if (!(this->_internal_gyro_y() <= 0 && this->_internal_gyro_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double gyro_z = 10;
  if (!(this->_internal_gyro_z() <= 0 && this->_internal_gyro_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double euler_x = 11;
  if (!(this->_internal_euler_x() <= 0 && this->_internal_euler_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double euler_y = 12;
  if (!(this->_internal_euler_y() <= 0 && this->_internal_euler_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double euler_z = 13;
  if (!(this->_internal_euler_z() <= 0 && this->_internal_euler_z() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerometer_x = 14;
  if (!(this->_internal_accelerometer_x() <= 0 && this->_internal_accelerometer_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerometer_y = 15;
  if (!(this->_internal_accelerometer_y() <= 0 && this->_internal_accelerometer_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double accelerometer_z = 16;
  if (!(this->_internal_accelerometer_z() <= 0 && this->_internal_accelerometer_z() >= 0)) {
    total_size += 2 + 8;
  }

  // double magnetometer_x = 17;
  if (!(this->_internal_magnetometer_x() <= 0 && this->_internal_magnetometer_x() >= 0)) {
    total_size += 2 + 8;
  }

  // double magnetometer_y = 18;
  if (!(this->_internal_magnetometer_y() <= 0 && this->_internal_magnetometer_y() >= 0)) {
    total_size += 2 + 8;
  }

  // double magnetometer_z = 19;
  if (!(this->_internal_magnetometer_z() <= 0 && this->_internal_magnetometer_z() >= 0)) {
    total_size += 2 + 8;
  }

  // double gravity_x = 20;
  if (!(this->_internal_gravity_x() <= 0 && this->_internal_gravity_x() >= 0)) {
    total_size += 2 + 8;
  }

  // double gravity_y = 21;
  if (!(this->_internal_gravity_y() <= 0 && this->_internal_gravity_y() >= 0)) {
    total_size += 2 + 8;
  }

  // double gravity_z = 22;
  if (!(this->_internal_gravity_z() <= 0 && this->_internal_gravity_z() >= 0)) {
    total_size += 2 + 8;
  }

  // .sensors.ImuData.CalibrationStatus cal_system = 23;
  if (this->_internal_cal_system() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_system());
  }

  // .sensors.ImuData.CalibrationStatus cal_gyroscope = 24;
  if (this->_internal_cal_gyroscope() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_gyroscope());
  }

  // .sensors.ImuData.CalibrationStatus cal_accelerometer = 25;
  if (this->_internal_cal_accelerometer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_accelerometer());
  }

  // .sensors.ImuData.CalibrationStatus cal_magnetometer = 26;
  if (this->_internal_cal_magnetometer() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cal_magnetometer());
  }

  // .sensors.Imu source = 28;
  if (this->_internal_source() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImuData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ImuData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImuData::GetClassData() const { return &_class_data_; }

void ImuData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ImuData *>(to)->MergeFrom(
      static_cast<const ImuData &>(from));
}


void ImuData::MergeFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ImuData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from._internal_quaternion_x() <= 0 && from._internal_quaternion_x() >= 0)) {
    _internal_set_quaternion_x(from._internal_quaternion_x());
  }
  if (!(from._internal_quaternion_y() <= 0 && from._internal_quaternion_y() >= 0)) {
    _internal_set_quaternion_y(from._internal_quaternion_y());
  }
  if (!(from._internal_quaternion_z() <= 0 && from._internal_quaternion_z() >= 0)) {
    _internal_set_quaternion_z(from._internal_quaternion_z());
  }
  if (!(from._internal_quaternion_w() <= 0 && from._internal_quaternion_w() >= 0)) {
    _internal_set_quaternion_w(from._internal_quaternion_w());
  }
  if (!(from._internal_acceleration_x() <= 0 && from._internal_acceleration_x() >= 0)) {
    _internal_set_acceleration_x(from._internal_acceleration_x());
  }
  if (!(from._internal_acceleration_y() <= 0 && from._internal_acceleration_y() >= 0)) {
    _internal_set_acceleration_y(from._internal_acceleration_y());
  }
  if (!(from._internal_acceleration_z() <= 0 && from._internal_acceleration_z() >= 0)) {
    _internal_set_acceleration_z(from._internal_acceleration_z());
  }
  if (!(from._internal_gyro_x() <= 0 && from._internal_gyro_x() >= 0)) {
    _internal_set_gyro_x(from._internal_gyro_x());
  }
  if (!(from._internal_gyro_y() <= 0 && from._internal_gyro_y() >= 0)) {
    _internal_set_gyro_y(from._internal_gyro_y());
  }
  if (!(from._internal_gyro_z() <= 0 && from._internal_gyro_z() >= 0)) {
    _internal_set_gyro_z(from._internal_gyro_z());
  }
  if (!(from._internal_euler_x() <= 0 && from._internal_euler_x() >= 0)) {
    _internal_set_euler_x(from._internal_euler_x());
  }
  if (!(from._internal_euler_y() <= 0 && from._internal_euler_y() >= 0)) {
    _internal_set_euler_y(from._internal_euler_y());
  }
  if (!(from._internal_euler_z() <= 0 && from._internal_euler_z() >= 0)) {
    _internal_set_euler_z(from._internal_euler_z());
  }
  if (!(from._internal_accelerometer_x() <= 0 && from._internal_accelerometer_x() >= 0)) {
    _internal_set_accelerometer_x(from._internal_accelerometer_x());
  }
  if (!(from._internal_accelerometer_y() <= 0 && from._internal_accelerometer_y() >= 0)) {
    _internal_set_accelerometer_y(from._internal_accelerometer_y());
  }
  if (!(from._internal_accelerometer_z() <= 0 && from._internal_accelerometer_z() >= 0)) {
    _internal_set_accelerometer_z(from._internal_accelerometer_z());
  }
  if (!(from._internal_magnetometer_x() <= 0 && from._internal_magnetometer_x() >= 0)) {
    _internal_set_magnetometer_x(from._internal_magnetometer_x());
  }
  if (!(from._internal_magnetometer_y() <= 0 && from._internal_magnetometer_y() >= 0)) {
    _internal_set_magnetometer_y(from._internal_magnetometer_y());
  }
  if (!(from._internal_magnetometer_z() <= 0 && from._internal_magnetometer_z() >= 0)) {
    _internal_set_magnetometer_z(from._internal_magnetometer_z());
  }
  if (!(from._internal_gravity_x() <= 0 && from._internal_gravity_x() >= 0)) {
    _internal_set_gravity_x(from._internal_gravity_x());
  }
  if (!(from._internal_gravity_y() <= 0 && from._internal_gravity_y() >= 0)) {
    _internal_set_gravity_y(from._internal_gravity_y());
  }
  if (!(from._internal_gravity_z() <= 0 && from._internal_gravity_z() >= 0)) {
    _internal_set_gravity_z(from._internal_gravity_z());
  }
  if (from._internal_cal_system() != 0) {
    _internal_set_cal_system(from._internal_cal_system());
  }
  if (from._internal_cal_gyroscope() != 0) {
    _internal_set_cal_gyroscope(from._internal_cal_gyroscope());
  }
  if (from._internal_cal_accelerometer() != 0) {
    _internal_set_cal_accelerometer(from._internal_cal_accelerometer());
  }
  if (from._internal_cal_magnetometer() != 0) {
    _internal_set_cal_magnetometer(from._internal_cal_magnetometer());
  }
  if (from._internal_source() != 0) {
    _internal_set_source(from._internal_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImuData::CopyFrom(const ImuData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ImuData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImuData::IsInitialized() const {
  return true;
}

void ImuData::InternalSwap(ImuData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImuData, source_)
      + sizeof(ImuData::source_)
      - PROTOBUF_FIELD_OFFSET(ImuData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImuData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[39]);
}

// ===================================================================

class ChairMode::_Internal {
 public:
};

ChairMode::ChairMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ChairMode)
}
ChairMode::ChairMode(const ChairMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_drive_mode_ = from.is_drive_mode_;
  // @@protoc_insertion_point(copy_constructor:sensors.ChairMode)
}

void ChairMode::SharedCtor() {
is_drive_mode_ = false;
}

ChairMode::~ChairMode() {
  // @@protoc_insertion_point(destructor:sensors.ChairMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChairMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChairMode::ArenaDtor(void* object) {
  ChairMode* _this = reinterpret_cast< ChairMode* >(object);
  (void)_this;
}
void ChairMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChairMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChairMode::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ChairMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_drive_mode_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChairMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_drive_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_drive_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChairMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ChairMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_drive_mode = 1;
  if (this->_internal_is_drive_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_drive_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ChairMode)
  return target;
}

size_t ChairMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ChairMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_drive_mode = 1;
  if (this->_internal_is_drive_mode() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChairMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChairMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChairMode::GetClassData() const { return &_class_data_; }

void ChairMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChairMode *>(to)->MergeFrom(
      static_cast<const ChairMode &>(from));
}


void ChairMode::MergeFrom(const ChairMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ChairMode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_drive_mode() != 0) {
    _internal_set_is_drive_mode(from._internal_is_drive_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChairMode::CopyFrom(const ChairMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ChairMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairMode::IsInitialized() const {
  return true;
}

void ChairMode::InternalSwap(ChairMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_drive_mode_, other->is_drive_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChairMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[40]);
}

// ===================================================================

class ChairProfile::_Internal {
 public:
};

ChairProfile::ChairProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ChairProfile)
}
ChairProfile::ChairProfile(const ChairProfile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  profile_ = from.profile_;
  // @@protoc_insertion_point(copy_constructor:sensors.ChairProfile)
}

void ChairProfile::SharedCtor() {
profile_ = 0;
}

ChairProfile::~ChairProfile() {
  // @@protoc_insertion_point(destructor:sensors.ChairProfile)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChairProfile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChairProfile::ArenaDtor(void* object) {
  ChairProfile* _this = reinterpret_cast< ChairProfile* >(object);
  (void)_this;
}
void ChairProfile::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChairProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChairProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ChairProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  profile_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChairProfile::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 profile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          profile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChairProfile::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ChairProfile)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 profile = 1;
  if (this->_internal_profile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_profile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ChairProfile)
  return target;
}

size_t ChairProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ChairProfile)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 profile = 1;
  if (this->_internal_profile() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_profile());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChairProfile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChairProfile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChairProfile::GetClassData() const { return &_class_data_; }

void ChairProfile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChairProfile *>(to)->MergeFrom(
      static_cast<const ChairProfile &>(from));
}


void ChairProfile::MergeFrom(const ChairProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ChairProfile)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_profile() != 0) {
    _internal_set_profile(from._internal_profile());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChairProfile::CopyFrom(const ChairProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ChairProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChairProfile::IsInitialized() const {
  return true;
}

void ChairProfile::InternalSwap(ChairProfile* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(profile_, other->profile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChairProfile::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[41]);
}

// ===================================================================

class SpeedSetting::_Internal {
 public:
};

SpeedSetting::SpeedSetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.SpeedSetting)
}
SpeedSetting::SpeedSetting(const SpeedSetting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  speed_setting_ = from.speed_setting_;
  // @@protoc_insertion_point(copy_constructor:sensors.SpeedSetting)
}

void SpeedSetting::SharedCtor() {
speed_setting_ = 0;
}

SpeedSetting::~SpeedSetting() {
  // @@protoc_insertion_point(destructor:sensors.SpeedSetting)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SpeedSetting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeedSetting::ArenaDtor(void* object) {
  SpeedSetting* _this = reinterpret_cast< SpeedSetting* >(object);
  (void)_this;
}
void SpeedSetting::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpeedSetting::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeedSetting::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.SpeedSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  speed_setting_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpeedSetting::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 speed_setting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          speed_setting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpeedSetting::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.SpeedSetting)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 speed_setting = 1;
  if (this->_internal_speed_setting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_speed_setting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.SpeedSetting)
  return target;
}

size_t SpeedSetting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.SpeedSetting)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 speed_setting = 1;
  if (this->_internal_speed_setting() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_speed_setting());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpeedSetting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SpeedSetting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpeedSetting::GetClassData() const { return &_class_data_; }

void SpeedSetting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SpeedSetting *>(to)->MergeFrom(
      static_cast<const SpeedSetting &>(from));
}


void SpeedSetting::MergeFrom(const SpeedSetting& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.SpeedSetting)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_speed_setting() != 0) {
    _internal_set_speed_setting(from._internal_speed_setting());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpeedSetting::CopyFrom(const SpeedSetting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.SpeedSetting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeedSetting::IsInitialized() const {
  return true;
}

void SpeedSetting::InternalSwap(SpeedSetting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(speed_setting_, other->speed_setting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpeedSetting::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[42]);
}

// ===================================================================

class JoystickData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const JoystickData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
JoystickData::_Internal::timestamp(const JoystickData* msg) {
  return *msg->timestamp_;
}
void JoystickData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
JoystickData::JoystickData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.JoystickData)
}
JoystickData::JoystickData(const JoystickData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  joystick_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_joystick_zone().empty()) {
    joystick_zone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_joystick_zone(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&forward_back_, &from.forward_back_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  // @@protoc_insertion_point(copy_constructor:sensors.JoystickData)
}

void JoystickData::SharedCtor() {
joystick_zone_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(left_right_));
}

JoystickData::~JoystickData() {
  // @@protoc_insertion_point(destructor:sensors.JoystickData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void JoystickData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  joystick_zone_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void JoystickData::ArenaDtor(void* object) {
  JoystickData* _this = reinterpret_cast< JoystickData* >(object);
  (void)_this;
}
void JoystickData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JoystickData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.JoystickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  joystick_zone_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&forward_back_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_right_) -
      reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 forward_back = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 left_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string joystick_zone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_joystick_zone();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.JoystickData.joystick_zone"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.JoystickData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->_internal_forward_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_forward_back(), target);
  }

  // int32 left_right = 2;
  if (this->_internal_left_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_right(), target);
  }

  // string joystick_zone = 3;
  if (!this->_internal_joystick_zone().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_joystick_zone().data(), static_cast<int>(this->_internal_joystick_zone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.JoystickData.joystick_zone");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_joystick_zone(), target);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.JoystickData)
  return target;
}

size_t JoystickData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.JoystickData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string joystick_zone = 3;
  if (!this->_internal_joystick_zone().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_joystick_zone());
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int32 forward_back = 1;
  if (this->_internal_forward_back() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_forward_back());
  }

  // int32 left_right = 2;
  if (this->_internal_left_right() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left_right());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JoystickData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JoystickData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JoystickData::GetClassData() const { return &_class_data_; }

void JoystickData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JoystickData *>(to)->MergeFrom(
      static_cast<const JoystickData &>(from));
}


void JoystickData::MergeFrom(const JoystickData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.JoystickData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_joystick_zone().empty()) {
    _internal_set_joystick_zone(from._internal_joystick_zone());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_forward_back() != 0) {
    _internal_set_forward_back(from._internal_forward_back());
  }
  if (from._internal_left_right() != 0) {
    _internal_set_left_right(from._internal_left_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JoystickData::CopyFrom(const JoystickData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.JoystickData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickData::IsInitialized() const {
  return true;
}

void JoystickData::InternalSwap(JoystickData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &joystick_zone_, lhs_arena,
      &other->joystick_zone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(JoystickData, left_right_)
      + sizeof(JoystickData::left_right_)
      - PROTOBUF_FIELD_OFFSET(JoystickData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[43]);
}

// ===================================================================

class Joystick::_Internal {
 public:
};

Joystick::Joystick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Joystick)
}
Joystick::Joystick(const Joystick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_back_, &from.forward_back_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  // @@protoc_insertion_point(copy_constructor:sensors.Joystick)
}

void Joystick::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_back_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
}

Joystick::~Joystick() {
  // @@protoc_insertion_point(destructor:sensors.Joystick)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Joystick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Joystick::ArenaDtor(void* object) {
  Joystick* _this = reinterpret_cast< Joystick* >(object);
  (void)_this;
}
void Joystick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Joystick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Joystick::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Joystick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_back_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_right_) -
      reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Joystick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 forward_back = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 left_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Joystick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Joystick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->_internal_forward_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_forward_back(), target);
  }

  // int32 left_right = 2;
  if (this->_internal_left_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Joystick)
  return target;
}

size_t Joystick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Joystick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->_internal_forward_back() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_forward_back());
  }

  // int32 left_right = 2;
  if (this->_internal_left_right() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left_right());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Joystick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Joystick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Joystick::GetClassData() const { return &_class_data_; }

void Joystick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Joystick *>(to)->MergeFrom(
      static_cast<const Joystick &>(from));
}


void Joystick::MergeFrom(const Joystick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Joystick)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_forward_back() != 0) {
    _internal_set_forward_back(from._internal_forward_back());
  }
  if (from._internal_left_right() != 0) {
    _internal_set_left_right(from._internal_left_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Joystick::CopyFrom(const Joystick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Joystick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Joystick::IsInitialized() const {
  return true;
}

void Joystick::InternalSwap(Joystick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Joystick, left_right_)
      + sizeof(Joystick::left_right_)
      - PROTOBUF_FIELD_OFFSET(Joystick, forward_back_)>(
          reinterpret_cast<char*>(&forward_back_),
          reinterpret_cast<char*>(&other->forward_back_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Joystick::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[44]);
}

// ===================================================================

class BatteryVoltage::_Internal {
 public:
};

BatteryVoltage::BatteryVoltage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.BatteryVoltage)
}
BatteryVoltage::BatteryVoltage(const BatteryVoltage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battery_voltage_ = from.battery_voltage_;
  // @@protoc_insertion_point(copy_constructor:sensors.BatteryVoltage)
}

void BatteryVoltage::SharedCtor() {
battery_voltage_ = 0;
}

BatteryVoltage::~BatteryVoltage() {
  // @@protoc_insertion_point(destructor:sensors.BatteryVoltage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatteryVoltage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatteryVoltage::ArenaDtor(void* object) {
  BatteryVoltage* _this = reinterpret_cast< BatteryVoltage* >(object);
  (void)_this;
}
void BatteryVoltage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryVoltage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryVoltage::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_voltage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryVoltage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double battery_voltage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          battery_voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryVoltage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BatteryVoltage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double battery_voltage = 1;
  if (!(this->_internal_battery_voltage() <= 0 && this->_internal_battery_voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_battery_voltage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BatteryVoltage)
  return target;
}

size_t BatteryVoltage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BatteryVoltage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double battery_voltage = 1;
  if (!(this->_internal_battery_voltage() <= 0 && this->_internal_battery_voltage() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryVoltage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatteryVoltage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryVoltage::GetClassData() const { return &_class_data_; }

void BatteryVoltage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatteryVoltage *>(to)->MergeFrom(
      static_cast<const BatteryVoltage &>(from));
}


void BatteryVoltage::MergeFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BatteryVoltage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_battery_voltage() <= 0 && from._internal_battery_voltage() >= 0)) {
    _internal_set_battery_voltage(from._internal_battery_voltage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryVoltage::CopyFrom(const BatteryVoltage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BatteryVoltage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryVoltage::IsInitialized() const {
  return true;
}

void BatteryVoltage::InternalSwap(BatteryVoltage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(battery_voltage_, other->battery_voltage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryVoltage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[45]);
}

// ===================================================================

class BatteryPercent::_Internal {
 public:
};

BatteryPercent::BatteryPercent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.BatteryPercent)
}
BatteryPercent::BatteryPercent(const BatteryPercent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battery_percentage_ = from.battery_percentage_;
  // @@protoc_insertion_point(copy_constructor:sensors.BatteryPercent)
}

void BatteryPercent::SharedCtor() {
battery_percentage_ = 0;
}

BatteryPercent::~BatteryPercent() {
  // @@protoc_insertion_point(destructor:sensors.BatteryPercent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatteryPercent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatteryPercent::ArenaDtor(void* object) {
  BatteryPercent* _this = reinterpret_cast< BatteryPercent* >(object);
  (void)_this;
}
void BatteryPercent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatteryPercent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatteryPercent::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.BatteryPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battery_percentage_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatteryPercent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 battery_percentage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          battery_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatteryPercent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.BatteryPercent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 battery_percentage = 1;
  if (this->_internal_battery_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_battery_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.BatteryPercent)
  return target;
}

size_t BatteryPercent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.BatteryPercent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 battery_percentage = 1;
  if (this->_internal_battery_percentage() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_battery_percentage());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatteryPercent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatteryPercent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatteryPercent::GetClassData() const { return &_class_data_; }

void BatteryPercent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatteryPercent *>(to)->MergeFrom(
      static_cast<const BatteryPercent &>(from));
}


void BatteryPercent::MergeFrom(const BatteryPercent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.BatteryPercent)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_battery_percentage() != 0) {
    _internal_set_battery_percentage(from._internal_battery_percentage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatteryPercent::CopyFrom(const BatteryPercent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.BatteryPercent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatteryPercent::IsInitialized() const {
  return true;
}

void BatteryPercent::InternalSwap(BatteryPercent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(battery_percentage_, other->battery_percentage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BatteryPercent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[46]);
}

// ===================================================================

class GPSData::_Internal {
 public:
};

GPSData::GPSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.GPSData)
}
GPSData::GPSData(const GPSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(second_));
  // @@protoc_insertion_point(copy_constructor:sensors.GPSData)
}

void GPSData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&second_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(second_));
}

GPSData::~GPSData() {
  // @@protoc_insertion_point(destructor:sensors.GPSData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GPSData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GPSData::ArenaDtor(void* object) {
  GPSData* _this = reinterpret_cast< GPSData* >(object);
  (void)_this;
}
void GPSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GPSData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.GPSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&second_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(second_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 heading_of_motion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          heading_of_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 number_of_sv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          number_of_sv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 hDOP = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          hdop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height_above_sea = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          height_above_sea_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ground_speed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ground_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.GPSData.quality_t quality = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::sensors::GPSData_quality_t>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 year = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 month = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hour = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 minute = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 second = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPSData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.GPSData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->_internal_latitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_latitude(), target);
  }

  // int32 longitude = 2;
  if (this->_internal_longitude() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_longitude(), target);
  }

  // int32 heading_of_motion = 3;
  if (this->_internal_heading_of_motion() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_heading_of_motion(), target);
  }

  // uint32 number_of_sv = 4;
  if (this->_internal_number_of_sv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_number_of_sv(), target);
  }

  // uint32 hDOP = 5;
  if (this->_internal_hdop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hdop(), target);
  }

  // int32 height_above_sea = 6;
  if (this->_internal_height_above_sea() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_height_above_sea(), target);
  }

  // int32 ground_speed = 7;
  if (this->_internal_ground_speed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ground_speed(), target);
  }

  // .sensors.GPSData.quality_t quality = 8;
  if (this->_internal_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_quality(), target);
  }

  // int32 year = 9;
  if (this->_internal_year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_year(), target);
  }

  // int32 month = 10;
  if (this->_internal_month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_month(), target);
  }

  // int32 day = 11;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_day(), target);
  }

  // int32 hour = 12;
  if (this->_internal_hour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_hour(), target);
  }

  // int32 minute = 13;
  if (this->_internal_minute() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_minute(), target);
  }

  // int32 second = 14;
  if (this->_internal_second() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_second(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.GPSData)
  return target;
}

size_t GPSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.GPSData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 latitude = 1;
  if (this->_internal_latitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_latitude());
  }

  // int32 longitude = 2;
  if (this->_internal_longitude() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_longitude());
  }

  // int32 heading_of_motion = 3;
  if (this->_internal_heading_of_motion() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_heading_of_motion());
  }

  // uint32 number_of_sv = 4;
  if (this->_internal_number_of_sv() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_sv());
  }

  // uint32 hDOP = 5;
  if (this->_internal_hdop() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_hdop());
  }

  // int32 height_above_sea = 6;
  if (this->_internal_height_above_sea() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height_above_sea());
  }

  // int32 ground_speed = 7;
  if (this->_internal_ground_speed() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ground_speed());
  }

  // .sensors.GPSData.quality_t quality = 8;
  if (this->_internal_quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // int32 year = 9;
  if (this->_internal_year() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_year());
  }

  // int32 month = 10;
  if (this->_internal_month() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_month());
  }

  // int32 day = 11;
  if (this->_internal_day() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  // int32 hour = 12;
  if (this->_internal_hour() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hour());
  }

  // int32 minute = 13;
  if (this->_internal_minute() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minute());
  }

  // int32 second = 14;
  if (this->_internal_second() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_second());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPSData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GPSData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPSData::GetClassData() const { return &_class_data_; }

void GPSData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GPSData *>(to)->MergeFrom(
      static_cast<const GPSData &>(from));
}


void GPSData::MergeFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.GPSData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_latitude() != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (from._internal_longitude() != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_heading_of_motion() != 0) {
    _internal_set_heading_of_motion(from._internal_heading_of_motion());
  }
  if (from._internal_number_of_sv() != 0) {
    _internal_set_number_of_sv(from._internal_number_of_sv());
  }
  if (from._internal_hdop() != 0) {
    _internal_set_hdop(from._internal_hdop());
  }
  if (from._internal_height_above_sea() != 0) {
    _internal_set_height_above_sea(from._internal_height_above_sea());
  }
  if (from._internal_ground_speed() != 0) {
    _internal_set_ground_speed(from._internal_ground_speed());
  }
  if (from._internal_quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from._internal_month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from._internal_hour() != 0) {
    _internal_set_hour(from._internal_hour());
  }
  if (from._internal_minute() != 0) {
    _internal_set_minute(from._internal_minute());
  }
  if (from._internal_second() != 0) {
    _internal_set_second(from._internal_second());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPSData::CopyFrom(const GPSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.GPSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPSData::IsInitialized() const {
  return true;
}

void GPSData::InternalSwap(GPSData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPSData, second_)
      + sizeof(GPSData::second_)
      - PROTOBUF_FIELD_OFFSET(GPSData, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPSData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[47]);
}

// ===================================================================

class EncoderData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const EncoderData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
EncoderData::_Internal::timestamp(const EncoderData* msg) {
  return *msg->timestamp_;
}
void EncoderData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
EncoderData::EncoderData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.EncoderData)
}
EncoderData::EncoderData(const EncoderData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&left_angle_, &from.left_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&br_caster_degrees_) -
    reinterpret_cast<char*>(&left_angle_)) + sizeof(br_caster_degrees_));
  // @@protoc_insertion_point(copy_constructor:sensors.EncoderData)
}

void EncoderData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&br_caster_degrees_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(br_caster_degrees_));
}

EncoderData::~EncoderData() {
  // @@protoc_insertion_point(destructor:sensors.EncoderData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EncoderData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void EncoderData::ArenaDtor(void* object) {
  EncoderData* _this = reinterpret_cast< EncoderData* >(object);
  (void)_this;
}
void EncoderData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EncoderData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EncoderData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.EncoderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&left_angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&br_caster_degrees_) -
      reinterpret_cast<char*>(&left_angle_)) + sizeof(br_caster_degrees_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EncoderData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float left_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          left_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float right_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          right_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fl_caster_degrees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          fl_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bl_caster_degrees = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          bl_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fr_caster_degrees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          fr_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float br_caster_degrees = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          br_caster_degrees_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncoderData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.EncoderData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float left_angle = 1;
  if (!(this->_internal_left_angle() <= 0 && this->_internal_left_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_left_angle(), target);
  }

  // float right_angle = 2;
  if (!(this->_internal_right_angle() <= 0 && this->_internal_right_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_right_angle(), target);
  }

  // float fl_caster_degrees = 3;
  if (!(this->_internal_fl_caster_degrees() <= 0 && this->_internal_fl_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_fl_caster_degrees(), target);
  }

  // float bl_caster_degrees = 4;
  if (!(this->_internal_bl_caster_degrees() <= 0 && this->_internal_bl_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_bl_caster_degrees(), target);
  }

  // float fr_caster_degrees = 5;
  if (!(this->_internal_fr_caster_degrees() <= 0 && this->_internal_fr_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_fr_caster_degrees(), target);
  }

  // float br_caster_degrees = 6;
  if (!(this->_internal_br_caster_degrees() <= 0 && this->_internal_br_caster_degrees() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_br_caster_degrees(), target);
  }

  // .google.protobuf.Timestamp timestamp = 7;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.EncoderData)
  return target;
}

size_t EncoderData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.EncoderData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 7;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // float left_angle = 1;
  if (!(this->_internal_left_angle() <= 0 && this->_internal_left_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float right_angle = 2;
  if (!(this->_internal_right_angle() <= 0 && this->_internal_right_angle() >= 0)) {
    total_size += 1 + 4;
  }

  // float fl_caster_degrees = 3;
  if (!(this->_internal_fl_caster_degrees() <= 0 && this->_internal_fl_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  // float bl_caster_degrees = 4;
  if (!(this->_internal_bl_caster_degrees() <= 0 && this->_internal_bl_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  // float fr_caster_degrees = 5;
  if (!(this->_internal_fr_caster_degrees() <= 0 && this->_internal_fr_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  // float br_caster_degrees = 6;
  if (!(this->_internal_br_caster_degrees() <= 0 && this->_internal_br_caster_degrees() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EncoderData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EncoderData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EncoderData::GetClassData() const { return &_class_data_; }

void EncoderData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EncoderData *>(to)->MergeFrom(
      static_cast<const EncoderData &>(from));
}


void EncoderData::MergeFrom(const EncoderData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.EncoderData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (!(from._internal_left_angle() <= 0 && from._internal_left_angle() >= 0)) {
    _internal_set_left_angle(from._internal_left_angle());
  }
  if (!(from._internal_right_angle() <= 0 && from._internal_right_angle() >= 0)) {
    _internal_set_right_angle(from._internal_right_angle());
  }
  if (!(from._internal_fl_caster_degrees() <= 0 && from._internal_fl_caster_degrees() >= 0)) {
    _internal_set_fl_caster_degrees(from._internal_fl_caster_degrees());
  }
  if (!(from._internal_bl_caster_degrees() <= 0 && from._internal_bl_caster_degrees() >= 0)) {
    _internal_set_bl_caster_degrees(from._internal_bl_caster_degrees());
  }
  if (!(from._internal_fr_caster_degrees() <= 0 && from._internal_fr_caster_degrees() >= 0)) {
    _internal_set_fr_caster_degrees(from._internal_fr_caster_degrees());
  }
  if (!(from._internal_br_caster_degrees() <= 0 && from._internal_br_caster_degrees() >= 0)) {
    _internal_set_br_caster_degrees(from._internal_br_caster_degrees());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EncoderData::CopyFrom(const EncoderData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.EncoderData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncoderData::IsInitialized() const {
  return true;
}

void EncoderData::InternalSwap(EncoderData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncoderData, br_caster_degrees_)
      + sizeof(EncoderData::br_caster_degrees_)
      - PROTOBUF_FIELD_OFFSET(EncoderData, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EncoderData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[48]);
}

// ===================================================================

class Vec3::_Internal {
 public:
};

Vec3::Vec3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Vec3)
}
Vec3::Vec3(const Vec3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.Vec3)
}

void Vec3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vec3::~Vec3() {
  // @@protoc_insertion_point(destructor:sensors.Vec3)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec3::ArenaDtor(void* object) {
  Vec3* _this = reinterpret_cast< Vec3* >(object);
  (void)_this;
}
void Vec3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec3::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Vec3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Vec3)
  return target;
}

size_t Vec3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Vec3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec3::GetClassData() const { return &_class_data_; }

void Vec3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec3 *>(to)->MergeFrom(
      static_cast<const Vec3 &>(from));
}


void Vec3::MergeFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Vec3)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec3::CopyFrom(const Vec3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Vec3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  return true;
}

void Vec3::InternalSwap(Vec3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec3, z_)
      + sizeof(Vec3::z_)
      - PROTOBUF_FIELD_OFFSET(Vec3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[49]);
}

// ===================================================================

class Vec4::_Internal {
 public:
};

Vec4::Vec4(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.Vec4)
}
Vec4::Vec4(const Vec4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sensors.Vec4)
}

void Vec4::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&w_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&w_)) + sizeof(z_));
}

Vec4::~Vec4() {
  // @@protoc_insertion_point(destructor:sensors.Vec4)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Vec4::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vec4::ArenaDtor(void* object) {
  Vec4* _this = reinterpret_cast< Vec4* >(object);
  (void)_this;
}
void Vec4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vec4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vec4::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.Vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&w_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vec4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vec4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.Vec4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_w(), target);
  }

  // float x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_x(), target);
  }

  // float y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_y(), target);
  }

  // float z = 4;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.Vec4)
  return target;
}

size_t Vec4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.Vec4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float w = 1;
  if (!(this->_internal_w() <= 0 && this->_internal_w() >= 0)) {
    total_size += 1 + 4;
  }

  // float x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 4;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vec4::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vec4::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vec4::GetClassData() const { return &_class_data_; }

void Vec4::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vec4 *>(to)->MergeFrom(
      static_cast<const Vec4 &>(from));
}


void Vec4::MergeFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.Vec4)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_w() <= 0 && from._internal_w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vec4::CopyFrom(const Vec4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.Vec4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  return true;
}

void Vec4::InternalSwap(Vec4* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vec4, z_)
      + sizeof(Vec4::z_)
      - PROTOBUF_FIELD_OFFSET(Vec4, w_)>(
          reinterpret_cast<char*>(&w_),
          reinterpret_cast<char*>(&other->w_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vec4::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[50]);
}

// ===================================================================

class IrFrame::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const IrFrame* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
IrFrame::_Internal::timestamp(const IrFrame* msg) {
  return *msg->timestamp_;
}
void IrFrame::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
IrFrame::IrFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.IrFrame)
}
IrFrame::IrFrame(const IrFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame().empty()) {
    frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frame(), 
      GetArenaForAllocation());
  }
  camera_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera().empty()) {
    camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_camera(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&width_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:sensors.IrFrame)
}

void IrFrame::SharedCtor() {
frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
camera_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(size_));
}

IrFrame::~IrFrame() {
  // @@protoc_insertion_point(destructor:sensors.IrFrame)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IrFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void IrFrame::ArenaDtor(void* object) {
  IrFrame* _this = reinterpret_cast< IrFrame* >(object);
  (void)_this;
}
void IrFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IrFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IrFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.IrFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_.ClearToEmpty();
  camera_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&width_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IrFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string camera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_camera();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sensors.IrFrame.camera"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IrFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.IrFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes frame = 1;
  if (!this->_internal_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_frame(), target);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // string camera = 4;
  if (!this->_internal_camera().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera().data(), static_cast<int>(this->_internal_camera().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sensors.IrFrame.camera");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_camera(), target);
  }

  // int32 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_size(), target);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.IrFrame)
  return target;
}

size_t IrFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.IrFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frame = 1;
  if (!this->_internal_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frame());
  }

  // string camera = 4;
  if (!this->_internal_camera().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera());
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 height = 3;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IrFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IrFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IrFrame::GetClassData() const { return &_class_data_; }

void IrFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IrFrame *>(to)->MergeFrom(
      static_cast<const IrFrame &>(from));
}


void IrFrame::MergeFrom(const IrFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.IrFrame)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame().empty()) {
    _internal_set_frame(from._internal_frame());
  }
  if (!from._internal_camera().empty()) {
    _internal_set_camera(from._internal_camera());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IrFrame::CopyFrom(const IrFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.IrFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IrFrame::IsInitialized() const {
  return true;
}

void IrFrame::InternalSwap(IrFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frame_, lhs_arena,
      &other->frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &camera_, lhs_arena,
      &other->camera_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IrFrame, size_)
      + sizeof(IrFrame::size_)
      - PROTOBUF_FIELD_OFFSET(IrFrame, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IrFrame::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[51]);
}

// ===================================================================

class AhrsData::_Internal {
 public:
  static const ::sensors::Vec3& linear_velocity(const AhrsData* msg);
  static const ::sensors::Vec3& linear_acceleration(const AhrsData* msg);
  static const ::sensors::Vec3& angular_velocity(const AhrsData* msg);
  static const ::sensors::Vec3& angular_acceleration(const AhrsData* msg);
  static const ::sensors::Vec4& orientation(const AhrsData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const AhrsData* msg);
};

const ::sensors::Vec3&
AhrsData::_Internal::linear_velocity(const AhrsData* msg) {
  return *msg->linear_velocity_;
}
const ::sensors::Vec3&
AhrsData::_Internal::linear_acceleration(const AhrsData* msg) {
  return *msg->linear_acceleration_;
}
const ::sensors::Vec3&
AhrsData::_Internal::angular_velocity(const AhrsData* msg) {
  return *msg->angular_velocity_;
}
const ::sensors::Vec3&
AhrsData::_Internal::angular_acceleration(const AhrsData* msg) {
  return *msg->angular_acceleration_;
}
const ::sensors::Vec4&
AhrsData::_Internal::orientation(const AhrsData* msg) {
  return *msg->orientation_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AhrsData::_Internal::timestamp(const AhrsData* msg) {
  return *msg->timestamp_;
}
void AhrsData::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
AhrsData::AhrsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.AhrsData)
}
AhrsData::AhrsData(const AhrsData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::sensors::Vec3(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_linear_acceleration()) {
    linear_acceleration_ = new ::sensors::Vec3(*from.linear_acceleration_);
  } else {
    linear_acceleration_ = nullptr;
  }
  if (from._internal_has_angular_velocity()) {
    angular_velocity_ = new ::sensors::Vec3(*from.angular_velocity_);
  } else {
    angular_velocity_ = nullptr;
  }
  if (from._internal_has_angular_acceleration()) {
    angular_acceleration_ = new ::sensors::Vec3(*from.angular_acceleration_);
  } else {
    angular_acceleration_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::sensors::Vec4(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sensors.AhrsData)
}

void AhrsData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&linear_velocity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&linear_velocity_)) + sizeof(timestamp_));
}

AhrsData::~AhrsData() {
  // @@protoc_insertion_point(destructor:sensors.AhrsData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AhrsData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete linear_acceleration_;
  if (this != internal_default_instance()) delete angular_velocity_;
  if (this != internal_default_instance()) delete angular_acceleration_;
  if (this != internal_default_instance()) delete orientation_;
  if (this != internal_default_instance()) delete timestamp_;
}

void AhrsData::ArenaDtor(void* object) {
  AhrsData* _this = reinterpret_cast< AhrsData* >(object);
  (void)_this;
}
void AhrsData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AhrsData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AhrsData::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.AhrsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && linear_velocity_ != nullptr) {
    delete linear_velocity_;
  }
  linear_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && linear_acceleration_ != nullptr) {
    delete linear_acceleration_;
  }
  linear_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_velocity_ != nullptr) {
    delete angular_velocity_;
  }
  angular_velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_acceleration_ != nullptr) {
    delete angular_acceleration_;
  }
  angular_acceleration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AhrsData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.Vec3 linear_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.Vec3 linear_acceleration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.Vec3 angular_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.Vec3 angular_acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular_acceleration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .sensors.Vec4 orientation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AhrsData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.AhrsData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.Vec3 linear_velocity = 1;
  if (this->_internal_has_linear_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear_velocity(this), target, stream);
  }

  // .sensors.Vec3 linear_acceleration = 2;
  if (this->_internal_has_linear_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::linear_acceleration(this), target, stream);
  }

  // .sensors.Vec3 angular_velocity = 3;
  if (this->_internal_has_angular_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::angular_velocity(this), target, stream);
  }

  // .sensors.Vec3 angular_acceleration = 4;
  if (this->_internal_has_angular_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::angular_acceleration(this), target, stream);
  }

  // .sensors.Vec4 orientation = 5;
  if (this->_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::orientation(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.AhrsData)
  return target;
}

size_t AhrsData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.AhrsData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.Vec3 linear_velocity = 1;
  if (this->_internal_has_linear_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_velocity_);
  }

  // .sensors.Vec3 linear_acceleration = 2;
  if (this->_internal_has_linear_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_acceleration_);
  }

  // .sensors.Vec3 angular_velocity = 3;
  if (this->_internal_has_angular_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_velocity_);
  }

  // .sensors.Vec3 angular_acceleration = 4;
  if (this->_internal_has_angular_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_acceleration_);
  }

  // .sensors.Vec4 orientation = 5;
  if (this->_internal_has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AhrsData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AhrsData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AhrsData::GetClassData() const { return &_class_data_; }

void AhrsData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AhrsData *>(to)->MergeFrom(
      static_cast<const AhrsData &>(from));
}


void AhrsData::MergeFrom(const AhrsData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.AhrsData)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_linear_velocity()) {
    _internal_mutable_linear_velocity()->::sensors::Vec3::MergeFrom(from._internal_linear_velocity());
  }
  if (from._internal_has_linear_acceleration()) {
    _internal_mutable_linear_acceleration()->::sensors::Vec3::MergeFrom(from._internal_linear_acceleration());
  }
  if (from._internal_has_angular_velocity()) {
    _internal_mutable_angular_velocity()->::sensors::Vec3::MergeFrom(from._internal_angular_velocity());
  }
  if (from._internal_has_angular_acceleration()) {
    _internal_mutable_angular_acceleration()->::sensors::Vec3::MergeFrom(from._internal_angular_acceleration());
  }
  if (from._internal_has_orientation()) {
    _internal_mutable_orientation()->::sensors::Vec4::MergeFrom(from._internal_orientation());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AhrsData::CopyFrom(const AhrsData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.AhrsData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AhrsData::IsInitialized() const {
  return true;
}

void AhrsData::InternalSwap(AhrsData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AhrsData, timestamp_)
      + sizeof(AhrsData::timestamp_)
      - PROTOBUF_FIELD_OFFSET(AhrsData, linear_velocity_)>(
          reinterpret_cast<char*>(&linear_velocity_),
          reinterpret_cast<char*>(&other->linear_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AhrsData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[52]);
}

// ===================================================================

class RemoteJsValues::_Internal {
 public:
};

RemoteJsValues::RemoteJsValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RemoteJsValues)
}
RemoteJsValues::RemoteJsValues(const RemoteJsValues& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&forward_back_, &from.forward_back_,
    static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  // @@protoc_insertion_point(copy_constructor:sensors.RemoteJsValues)
}

void RemoteJsValues::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&forward_back_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&left_right_) -
    reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
}

RemoteJsValues::~RemoteJsValues() {
  // @@protoc_insertion_point(destructor:sensors.RemoteJsValues)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RemoteJsValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoteJsValues::ArenaDtor(void* object) {
  RemoteJsValues* _this = reinterpret_cast< RemoteJsValues* >(object);
  (void)_this;
}
void RemoteJsValues::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteJsValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RemoteJsValues::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RemoteJsValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&forward_back_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&left_right_) -
      reinterpret_cast<char*>(&forward_back_)) + sizeof(left_right_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteJsValues::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 forward_back = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          forward_back_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 left_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          left_right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteJsValues::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RemoteJsValues)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->_internal_forward_back() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_forward_back(), target);
  }

  // int32 left_right = 2;
  if (this->_internal_left_right() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_left_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RemoteJsValues)
  return target;
}

size_t RemoteJsValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RemoteJsValues)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 forward_back = 1;
  if (this->_internal_forward_back() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_forward_back());
  }

  // int32 left_right = 2;
  if (this->_internal_left_right() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left_right());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteJsValues::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RemoteJsValues::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteJsValues::GetClassData() const { return &_class_data_; }

void RemoteJsValues::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RemoteJsValues *>(to)->MergeFrom(
      static_cast<const RemoteJsValues &>(from));
}


void RemoteJsValues::MergeFrom(const RemoteJsValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RemoteJsValues)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_forward_back() != 0) {
    _internal_set_forward_back(from._internal_forward_back());
  }
  if (from._internal_left_right() != 0) {
    _internal_set_left_right(from._internal_left_right());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteJsValues::CopyFrom(const RemoteJsValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RemoteJsValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteJsValues::IsInitialized() const {
  return true;
}

void RemoteJsValues::InternalSwap(RemoteJsValues* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteJsValues, left_right_)
      + sizeof(RemoteJsValues::left_right_)
      - PROTOBUF_FIELD_OFFSET(RemoteJsValues, forward_back_)>(
          reinterpret_cast<char*>(&forward_back_),
          reinterpret_cast<char*>(&other->forward_back_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteJsValues::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[53]);
}

// ===================================================================

class ModeCtrl::_Internal {
 public:
};

ModeCtrl::ModeCtrl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.ModeCtrl)
}
ModeCtrl::ModeCtrl(const ModeCtrl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:sensors.ModeCtrl)
}

void ModeCtrl::SharedCtor() {
mode_ = 0;
}

ModeCtrl::~ModeCtrl() {
  // @@protoc_insertion_point(destructor:sensors.ModeCtrl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModeCtrl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModeCtrl::ArenaDtor(void* object) {
  ModeCtrl* _this = reinterpret_cast< ModeCtrl* >(object);
  (void)_this;
}
void ModeCtrl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModeCtrl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModeCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.ModeCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModeCtrl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sensors.DriveMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::sensors::DriveMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModeCtrl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.ModeCtrl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sensors.DriveMode mode = 1;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.ModeCtrl)
  return target;
}

size_t ModeCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.ModeCtrl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sensors.DriveMode mode = 1;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModeCtrl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModeCtrl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModeCtrl::GetClassData() const { return &_class_data_; }

void ModeCtrl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModeCtrl *>(to)->MergeFrom(
      static_cast<const ModeCtrl &>(from));
}


void ModeCtrl::MergeFrom(const ModeCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.ModeCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModeCtrl::CopyFrom(const ModeCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.ModeCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModeCtrl::IsInitialized() const {
  return true;
}

void ModeCtrl::InternalSwap(ModeCtrl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModeCtrl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[54]);
}

// ===================================================================

class RampMode::_Internal {
 public:
};

RampMode::RampMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RampMode)
}
RampMode::RampMode(const RampMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ramp_mode_, &from.ramp_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&ramp_approach_) -
    reinterpret_cast<char*>(&ramp_mode_)) + sizeof(ramp_approach_));
  // @@protoc_insertion_point(copy_constructor:sensors.RampMode)
}

void RampMode::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ramp_mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ramp_approach_) -
    reinterpret_cast<char*>(&ramp_mode_)) + sizeof(ramp_approach_));
}

RampMode::~RampMode() {
  // @@protoc_insertion_point(destructor:sensors.RampMode)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RampMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RampMode::ArenaDtor(void* object) {
  RampMode* _this = reinterpret_cast< RampMode* >(object);
  (void)_this;
}
void RampMode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RampMode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RampMode::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RampMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ramp_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ramp_approach_) -
      reinterpret_cast<char*>(&ramp_mode_)) + sizeof(ramp_approach_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RampMode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ramp_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ramp_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ramp_approach = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ramp_approach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampMode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RampMode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ramp_mode = 1;
  if (this->_internal_ramp_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ramp_mode(), target);
  }

  // bool ramp_approach = 2;
  if (this->_internal_ramp_approach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_ramp_approach(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RampMode)
  return target;
}

size_t RampMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RampMode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool ramp_mode = 1;
  if (this->_internal_ramp_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool ramp_approach = 2;
  if (this->_internal_ramp_approach() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RampMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RampMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RampMode::GetClassData() const { return &_class_data_; }

void RampMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RampMode *>(to)->MergeFrom(
      static_cast<const RampMode &>(from));
}


void RampMode::MergeFrom(const RampMode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RampMode)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ramp_mode() != 0) {
    _internal_set_ramp_mode(from._internal_ramp_mode());
  }
  if (from._internal_ramp_approach() != 0) {
    _internal_set_ramp_approach(from._internal_ramp_approach());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RampMode::CopyFrom(const RampMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RampMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampMode::IsInitialized() const {
  return true;
}

void RampMode::InternalSwap(RampMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RampMode, ramp_approach_)
      + sizeof(RampMode::ramp_approach_)
      - PROTOBUF_FIELD_OFFSET(RampMode, ramp_mode_)>(
          reinterpret_cast<char*>(&ramp_mode_),
          reinterpret_cast<char*>(&other->ramp_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RampMode::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[55]);
}

// ===================================================================

class RampAssistStates::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const RampAssistStates* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
RampAssistStates::_Internal::timestamp(const RampAssistStates* msg) {
  return *msg->timestamp_;
}
void RampAssistStates::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
RampAssistStates::RampAssistStates(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sensors.RampAssistStates)
}
RampAssistStates::RampAssistStates(const RampAssistStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&approach_) -
    reinterpret_cast<char*>(&state_)) + sizeof(approach_));
  // @@protoc_insertion_point(copy_constructor:sensors.RampAssistStates)
}

void RampAssistStates::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&approach_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(approach_));
}

RampAssistStates::~RampAssistStates() {
  // @@protoc_insertion_point(destructor:sensors.RampAssistStates)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RampAssistStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void RampAssistStates::ArenaDtor(void* object) {
  RampAssistStates* _this = reinterpret_cast< RampAssistStates* >(object);
  (void)_this;
}
void RampAssistStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RampAssistStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RampAssistStates::Clear() {
// @@protoc_insertion_point(message_clear_start:sensors.RampAssistStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&approach_) -
      reinterpret_cast<char*>(&state_)) + sizeof(approach_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RampAssistStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool approach = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          approach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RampAssistStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sensors.RampAssistStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_state(), target);
  }

  // bool approach = 2;
  if (this->_internal_approach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_approach(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sensors.RampAssistStates)
  return target;
}

size_t RampAssistStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sensors.RampAssistStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 + 1;
  }

  // bool approach = 2;
  if (this->_internal_approach() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RampAssistStates::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RampAssistStates::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RampAssistStates::GetClassData() const { return &_class_data_; }

void RampAssistStates::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RampAssistStates *>(to)->MergeFrom(
      static_cast<const RampAssistStates &>(from));
}


void RampAssistStates::MergeFrom(const RampAssistStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sensors.RampAssistStates)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_approach() != 0) {
    _internal_set_approach(from._internal_approach());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RampAssistStates::CopyFrom(const RampAssistStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sensors.RampAssistStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RampAssistStates::IsInitialized() const {
  return true;
}

void RampAssistStates::InternalSwap(RampAssistStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RampAssistStates, approach_)
      + sizeof(RampAssistStates::approach_)
      - PROTOBUF_FIELD_OFFSET(RampAssistStates, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RampAssistStates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_ptolemy_2eproto_getter, &descriptor_table_ptolemy_2eproto_once,
      file_level_metadata_ptolemy_2eproto[56]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sensors
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sensors::AudioPlaybackRequest* Arena::CreateMaybeMessage< ::sensors::AudioPlaybackRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::AudioPlaybackRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::PressRequest* Arena::CreateMaybeMessage< ::sensors::PressRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::PressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ZoneBoundary* Arena::CreateMaybeMessage< ::sensors::ZoneBoundary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ZoneBoundary >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ZoneBoundaries* Arena::CreateMaybeMessage< ::sensors::ZoneBoundaries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ZoneBoundaries >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BlockedZone* Arena::CreateMaybeMessage< ::sensors::BlockedZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BlockedZone >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BlockedZones* Arena::CreateMaybeMessage< ::sensors::BlockedZones >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BlockedZones >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::JoystickRange* Arena::CreateMaybeMessage< ::sensors::JoystickRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::JoystickRange >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::JoystickRanges* Arena::CreateMaybeMessage< ::sensors::JoystickRanges >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::JoystickRanges >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::StartModeData* Arena::CreateMaybeMessage< ::sensors::StartModeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::StartModeData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Response* Arena::CreateMaybeMessage< ::sensors::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::DFParameters* Arena::CreateMaybeMessage< ::sensors::DFParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::DFParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::DFSeatEvent* Arena::CreateMaybeMessage< ::sensors::DFSeatEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::DFSeatEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::DistanceData* Arena::CreateMaybeMessage< ::sensors::DistanceData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::DistanceData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::SeatPressure* Arena::CreateMaybeMessage< ::sensors::SeatPressure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::SeatPressure >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue_Linear* Arena::CreateMaybeMessage< ::sensors::ObstacleValue_Linear >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue_Linear >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue_Angular* Arena::CreateMaybeMessage< ::sensors::ObstacleValue_Angular >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue_Angular >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue_Combo* Arena::CreateMaybeMessage< ::sensors::ObstacleValue_Combo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue_Combo >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ObstacleValue* Arena::CreateMaybeMessage< ::sensors::ObstacleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ObstacleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ClosestObstacles* Arena::CreateMaybeMessage< ::sensors::ClosestObstacles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ClosestObstacles >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::CameraPoints* Arena::CreateMaybeMessage< ::sensors::CameraPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::CameraPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Point3D* Arena::CreateMaybeMessage< ::sensors::Point3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Point3D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::CameraPoints2D* Arena::CreateMaybeMessage< ::sensors::CameraPoints2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::CameraPoints2D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Point2D* Arena::CreateMaybeMessage< ::sensors::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::LoggingData* Arena::CreateMaybeMessage< ::sensors::LoggingData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::LoggingData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Led* Arena::CreateMaybeMessage< ::sensors::Led >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Led >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::HmiState* Arena::CreateMaybeMessage< ::sensors::HmiState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::HmiState >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::HmiStreamData* Arena::CreateMaybeMessage< ::sensors::HmiStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::HmiStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::PressCountStreamData* Arena::CreateMaybeMessage< ::sensors::PressCountStreamData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::PressCountStreamData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::NavigationScaling* Arena::CreateMaybeMessage< ::sensors::NavigationScaling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::NavigationScaling >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicCtrl* Arena::CreateMaybeMessage< ::sensors::UltrasonicCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicDistance* Arena::CreateMaybeMessage< ::sensors::UltrasonicDistance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicDistance >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicDistances* Arena::CreateMaybeMessage< ::sensors::UltrasonicDistances >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicDistances >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::UltrasonicCurve* Arena::CreateMaybeMessage< ::sensors::UltrasonicCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::UltrasonicCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarFilter* Arena::CreateMaybeMessage< ::sensors::RadarFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarCtrl* Arena::CreateMaybeMessage< ::sensors::RadarCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarPoint* Arena::CreateMaybeMessage< ::sensors::RadarPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RadarPoints* Arena::CreateMaybeMessage< ::sensors::RadarPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RadarPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ChairSpeed* Arena::CreateMaybeMessage< ::sensors::ChairSpeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ChairSpeed >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ImuCtrl* Arena::CreateMaybeMessage< ::sensors::ImuCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ImuCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ImuData* Arena::CreateMaybeMessage< ::sensors::ImuData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ImuData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ChairMode* Arena::CreateMaybeMessage< ::sensors::ChairMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ChairMode >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ChairProfile* Arena::CreateMaybeMessage< ::sensors::ChairProfile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ChairProfile >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::SpeedSetting* Arena::CreateMaybeMessage< ::sensors::SpeedSetting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::SpeedSetting >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::JoystickData* Arena::CreateMaybeMessage< ::sensors::JoystickData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::JoystickData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Joystick* Arena::CreateMaybeMessage< ::sensors::Joystick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Joystick >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BatteryVoltage* Arena::CreateMaybeMessage< ::sensors::BatteryVoltage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BatteryVoltage >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::BatteryPercent* Arena::CreateMaybeMessage< ::sensors::BatteryPercent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::BatteryPercent >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::GPSData* Arena::CreateMaybeMessage< ::sensors::GPSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::GPSData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::EncoderData* Arena::CreateMaybeMessage< ::sensors::EncoderData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::EncoderData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Vec3* Arena::CreateMaybeMessage< ::sensors::Vec3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Vec3 >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::Vec4* Arena::CreateMaybeMessage< ::sensors::Vec4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::Vec4 >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::IrFrame* Arena::CreateMaybeMessage< ::sensors::IrFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::IrFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::AhrsData* Arena::CreateMaybeMessage< ::sensors::AhrsData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::AhrsData >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RemoteJsValues* Arena::CreateMaybeMessage< ::sensors::RemoteJsValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RemoteJsValues >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::ModeCtrl* Arena::CreateMaybeMessage< ::sensors::ModeCtrl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::ModeCtrl >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RampMode* Arena::CreateMaybeMessage< ::sensors::RampMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RampMode >(arena);
}
template<> PROTOBUF_NOINLINE ::sensors::RampAssistStates* Arena::CreateMaybeMessage< ::sensors::RampAssistStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sensors::RampAssistStates >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
